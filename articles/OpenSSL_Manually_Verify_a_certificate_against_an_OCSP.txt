This is a text-only version of the following page on https://raymii.org:
---
Title       : 	OpenSSL: Manually verify a certificate against an OCSP
Author      : 	Remy van Elst
Date        : 	07-04-2014
URL         : 	https://raymii.org/s/articles/OpenSSL_Manually_Verify_a_certificate_against_an_OCSP.html
Format      : 	Markdown/HTML
---



This article shows you how to manually verfify a certificate against an OCSP
server. OCSP stands for the Online Certificate Status Protocol and is one way to
validate a certificate status. It is an alternative to the CRL, certificate
revocation list.

Compared to CRL's:

  * Since an OCSP response contains less information than a typical CRL (certificate revocation list), OCSP can use networks and client resources more efficiently.
  * Using OCSP, clients do not need to parse CRLs themselves, saving client-side complexity. However, this is balanced by the practical need to maintain a cache. In practice, such considerations are of little consequence, since most applications rely on third-party libraries for all X.509 functions.
  * OCSP discloses to the responder that a particular network host used a particular certificate at a particular time. OCSP does not mandate encryption, so other parties may intercept this information.

You can read more about the OCSP on [wikipedia][1]

<p class="ad"> <b>Recently I removed all Google Ads from this site due to their invasive tracking, as well as Google Analytics. Please, if you found this content useful, consider a small donation using any of the options below:</b><br><br> <a href="https://leafnode.nl">I'm developing an open source monitoring app called  Leaf Node Monitoring, for windows, linux & android. Go check it out!</a><br><br> <a href="https://github.com/sponsors/RaymiiOrg/">Consider sponsoring me on Github. It means the world to me if you show your appreciation and you'll help pay the server costs.</a><br><br> <a href="https://www.digitalocean.com/?refcode=7435ae6b8212">You can also sponsor me by getting a Digital Ocean VPS. With this referral link you'll get $100 credit for 60 days. </a><br><br> </p>


If you want to verify a certificate against a CRL manually [you can read my
article on that here][3].

We will be using OpenSSL in this article. I'm using the following version:

    
    
    $ openssl version
    OpenSSL 1.0.1g 7 Apr 2014
    

### Get a certificate with an OCSP

First we will need a certificate from a website. I'll be using Wikipedia as an
example here. We can retreive this with the following openssl command:

    
    
    openssl s_client -connect wikipedia.org:443 2>&1 < /dev/null | sed -n '/-----BEGIN/,/-----END/p'
    

Save this output to a file, for example, wikipedia.pem:

    
    
    openssl s_client -connect wikipedia.org:443 2>&1 < /dev/null | sed -n '/-----BEGIN/,/-----END/p' > wikipedia.pem
    

Now, check if this certificate has an OCSP URI:

    
    
    openssl x509 -noout -ocsp_uri -in wikipedia.pem
    http://ocsp.digicert.com
    

If it does not give any output, the certificate has no OCSP URI. You cannot
valdiate it against an OCSP.

### Getting the certificate chain

It is required to send the certificate chain along with the certificate you want
to validate. So, we need to get the certificate chain for our domain,
wikipedia.org. Using the `-showcerts` option with `openssl s_client`, we can see
all the certificates, including the chain:

    
    
    openssl s_client -connect wikipedia.org:443 -showcerts 2>&1 < /dev/null
    

Results in a boatload of output, but what we are interested in is the following:

    
    
     1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert High Assurance CA-3
       i:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert High Assurance EV Root CA
    -----BEGIN CERTIFICATE-----
    MIIGWDCCBUCgAwIBAgIQCl8RTQNbF5EX0u/UA4w/OzANBgkqhkiG9w0BAQUFADBs
    MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
    d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j
    ZSBFViBSb290IENBMB4XDTA4MDQwMjEyMDAwMFoXDTIyMDQwMzAwMDAwMFowZjEL
    MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3
    LmRpZ2ljZXJ0LmNvbTElMCMGA1UEAxMcRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug
    Q0EtMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL9hCikQH17+NDdR
    CPge+yLtYb4LDXBMUGMmdRW5QYiXtvCgFbsIYOBC6AUpEIc2iihlqO8xB3RtNpcv
    KEZmBMcqeSZ6mdWOw21PoF6tvD2Rwll7XjZswFPPAAgyPhBkWBATaccM7pxCUQD5
    BUTuJM56H+2MEb0SqPMV9Bx6MWkBG6fmXcCabH4JnudSREoQOiPkm7YDr6ictFuf
    1EutkozOtREqqjcYjbTCuNhcBoz4/yO9NV7UfD5+gw6RlgWYw7If48hl66l7XaAs
    zPw82W3tzPpLQ4zJ1LilYRyyQLYoEt+5+F/+07LJ7z20Hkt8HEyZNp496+ynaF4d
    32duXvsCAwEAAaOCAvowggL2MA4GA1UdDwEB/wQEAwIBhjCCAcYGA1UdIASCAb0w
    ggG5MIIBtQYLYIZIAYb9bAEDAAIwggGkMDoGCCsGAQUFBwIBFi5odHRwOi8vd3d3
    LmRpZ2ljZXJ0LmNvbS9zc2wtY3BzLXJlcG9zaXRvcnkuaHRtMIIBZAYIKwYBBQUH
    AgIwggFWHoIBUgBBAG4AeQAgAHUAcwBlACAAbwBmACAAdABoAGkAcwAgAEMAZQBy
    AHQAaQBmAGkAYwBhAHQAZQAgAGMAbwBuAHMAdABpAHQAdQB0AGUAcwAgAGEAYwBj
    AGUAcAB0AGEAbgBjAGUAIABvAGYAIAB0AGgAZQAgAEQAaQBnAGkAQwBlAHIAdAAg
    AEMAUAAvAEMAUABTACAAYQBuAGQAIAB0AGgAZQAgAFIAZQBsAHkAaQBuAGcAIABQ
    AGEAcgB0AHkAIABBAGcAcgBlAGUAbQBlAG4AdAAgAHcAaABpAGMAaAAgAGwAaQBt
    AGkAdAAgAGwAaQBhAGIAaQBsAGkAdAB5ACAAYQBuAGQAIABhAHIAZQAgAGkAbgBj
    AG8AcgBwAG8AcgBhAHQAZQBkACAAaABlAHIAZQBpAG4AIABiAHkAIAByAGUAZgBl
    AHIAZQBuAGMAZQAuMBIGA1UdEwEB/wQIMAYBAf8CAQAwNAYIKwYBBQUHAQEEKDAm
    MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wgY8GA1UdHwSB
    hzCBhDBAoD6gPIY6aHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0SGln
    aEFzc3VyYW5jZUVWUm9vdENBLmNybDBAoD6gPIY6aHR0cDovL2NybDQuZGlnaWNl
    cnQuY29tL0RpZ2lDZXJ0SGlnaEFzc3VyYW5jZUVWUm9vdENBLmNybDAfBgNVHSME
    GDAWgBSxPsNpA/i/RwHUmCYaCALvY2QrwzAdBgNVHQ4EFgQUUOpzidsp+xCPnuUB
    INTeeZlIg/cwDQYJKoZIhvcNAQEFBQADggEBAB7ipUiebNtTOA/vphoqrOIDQ+2a
    vD6OdRvw/S4iWawTwGHi5/rpmc2HCXVUKL9GYNy+USyS8xuRfDEIcOI3ucFbqL2j
    CwD7GhX9A61YasXHJJlIR0YxHpLvtF9ONMeQvzHB+LGEhtCcAarfilYGzjrpDq6X
    dF3XcZpCdF/ejUN83ulV7WkAywXgemFhM9EZTfkI7qA5xSU1tyvED7Ld8aW3DiTE
    JiiNeXf1L/BXunwH1OH8zVowV36GEEfdMR/X/KLCvzB8XSSq6PmuX2p0ws5rs0bY
    Ib4p1I5eFdZCSucyb6Sxa1GDWL4/bcf72gMhy2oWGU4K8K2Eyl2Us1p292E=
    -----END CERTIFICATE-----
    

As you can see, this is number 1. Number 0 is the certificate for Wikipedia, we
already have that. If your site has more certificates in its chain, you will see
more here. Save them all, in the order OpenSSL sends them (as in, first the one
which directly issued your server certificate, then the one that issues that
certificate and so on, with the root or most-root at the end of the file) to a
file, named `chain.pem`.

### Sending the OCSP request

We now have all the data we need to do an OCSP request. Using the following
Openssl command we can send an OCSP request and only get the text output:

    
    
    openssl ocsp -issuer chain.pem -cert wikipedia.pem -text -url http://ocsp.digicert.com
    

Results in:

    
    
    OCSP Request Data:
        Version: 1 (0x0)
        Requestor List:
            Certificate ID:
              Hash Algorithm: sha1
              Issuer Name Hash: ED48ADDDCB7B00E20E842AA9B409F1AC3034CF96
              Issuer Key Hash: 50EA7389DB29FB108F9EE50120D4DE79994883F7
              Serial Number: 0114195F66FAFF8FD66E12496E516F4F
        Request Extensions:
            OCSP Nonce:
                0410DA634F2ADC31DC48AE89BE64E8252D12
    OCSP Response Data:
        OCSP Response Status: successful (0x0)
        Response Type: Basic OCSP Response
        Version: 1 (0x0)
        Responder Id: 50EA7389DB29FB108F9EE50120D4DE79994883F7
        Produced At: Apr  9 08:45:00 2014 GMT
        Responses:
        Certificate ID:
          Hash Algorithm: sha1
          Issuer Name Hash: ED48ADDDCB7B00E20E842AA9B409F1AC3034CF96
          Issuer Key Hash: 50EA7389DB29FB108F9EE50120D4DE79994883F7
          Serial Number: 0114195F66FAFF8FD66E12496E516F4F
        Cert Status: good
        This Update: Apr  9 08:45:00 2014 GMT
        Next Update: Apr 16 09:00:00 2014 GMT
    
        Signature Algorithm: sha1WithRSAEncryption
             56:21:4c:dc:84:21:f7:a8:ac:a7:b9:bc:10:19:f8:19:f1:34:
             c1:63:ca:14:7f:8f:5a:85:2a:cc:02:b0:f8:b5:05:4a:0f:28:
             50:2a:4a:4d:04:01:b5:05:ef:a5:88:41:d8:9d:38:00:7d:76:
             1a:aa:ff:21:50:68:90:d2:0c:93:85:49:e7:8e:f1:58:08:77:
             a0:4e:e2:22:98:01:b7:e3:27:75:11:f5:b7:8f:e0:75:7d:19:
             9b:74:cf:05:dc:ae:1c:36:09:95:b6:08:bc:e7:3f:ea:a2:e3:
             ae:d7:8f:c0:9d:8e:c2:37:67:c7:5b:d8:b0:67:23:f1:51:53:
             26:c2:96:b0:1a:df:4e:fb:4e:e3:da:a3:98:26:59:a8:d7:17:
             69:87:a3:68:47:08:92:d0:37:04:6b:49:9a:96:9d:9c:b1:e8:
             cb:dc:68:7b:4a:4d:cb:08:f7:92:67:41:99:b6:54:56:80:0c:
             18:a7:24:53:ac:c6:da:1f:4d:f4:3c:7d:68:44:1d:a4:df:1d:
             48:07:85:52:86:59:46:d1:35:45:1a:c7:6b:6b:92:de:24:ae:
             c0:97:66:54:29:7a:c6:86:a6:da:9f:06:24:dc:ac:80:66:95:
             e0:eb:49:fd:fb:d4:81:6a:2b:81:41:57:24:78:3b:e0:66:70:
             d4:2e:52:92
    wikipedia.pem: good
        This Update: Apr  9 08:45:00 2014 GMT
        Next Update: Apr 16 09:00:00 2014 GMT
    

If you want to have a more summarized output, leave out the `-text` option. I
most of the time include it to find out problems with an OCSP.

This is how a good certificate status looks:

    
    
    openssl ocsp -issuer chain.pem -cert wikipedia.pem -url http://ocsp.digicert.com
    wikipedia.pem: good
        This Update: Apr  9 08:45:00 2014 GMT
        Next Update: Apr 16 09:00:00 2014 GMT
    

### Revoked certificate

If you have a revoked certificate, you can also test it the same way as stated
above. The response looks like this:

    
    
    Response verify OK
    test-revoked.pem: revoked
        This Update: Apr  9 03:02:45 2014 GMT
        Next Update: Apr 10 03:02:45 2014 GMT
        Revocation Time: Mar 25 15:45:55 2014 GMT
    

You can test this using the certificate and chain on the Verisign revoked
certificate test page:

### Other errors

If we send this request to another OCSP, one who did not issued this
certificate, we should receive an unauthorized error:

    
    
    openssl ocsp -issuer chain.pem -cert wikipedia.pem -url http://rapidssl-ocsp.geotrust.com
    Responder Error: unauthorized (6)
    

The `-text` option here shows more information:

    
    
    OCSP Request Data:
        Version: 1 (0x0)
        Requestor List:
            Certificate ID:
              Hash Algorithm: sha1
              Issuer Name Hash: ED48ADDDCB7B00E20E842AA9B409F1AC3034CF96
              Issuer Key Hash: 50EA7389DB29FB108F9EE50120D4DE79994883F7
              Serial Number: 0114195F66FAFF8FD66E12496E516F4F
        Request Extensions:
            OCSP Nonce:
                041015BB718C43C46C41122E841DB2282ECE
    Responder Error: unauthorized (6)
    

Some OCSP's are configured differently and give out this error:

    
    
    openssl ocsp -issuer chain.pem -cert wikipedia.pem -url http://ocsp.digidentity.eu/L4/services/ocsp
    Response Verify Failure
    140735308649312:error:2706B06F:OCSP routines:OCSP_CHECK_IDS:response contains no revocation data:ocsp_vfy.c:269:
    140735308649312:error:2706B06F:OCSP routines:OCSP_CHECK_IDS:response contains no revocation data:ocsp_vfy.c:269:
    wikipedia.pem: ERROR: No Status found.
    

If we do include the `-text` option here we can see that a response is sent,
however, that it has no data in it:

    
    
    OCSP Response Data:
        OCSP Response Status: successful (0x0)
        Response Type: Basic OCSP Response
        Version: 1 (0x0)
        Responder Id: C = NL, O = Digidentity B.V., CN = Digidentity OCSP
        Produced At: Apr  9 12:02:00 2014 GMT
        Responses:
        Response Extensions:
    OCSP Nonce:
        0410EB540472EA2D8246E88F3317B014BEEF
    Signature Algorithm: sha256WithRSAEncryption
    

Other OCSP's give out the "unknown" status:

    
    
    openssl ocsp -issuer chain.pem -cert wikipedia.pem  -url http://ocsp.quovadisglobal.com/
    Response Verify Failure
    140735308649312:error:27069070:OCSP routines:OCSP_basic_verify:root ca not trusted:ocsp_vfy.c:152:
    wikipedia.pem: unknown
        This Update: Apr  9 12:09:18 2014 GMT
    

The `-text` options shows us more:

    
    
    OCSP Response Data:
        OCSP Response Status: successful (0x0)
        Response Type: Basic OCSP Response
        Version: 1 (0x0)
        Responder Id: C = CH, O = QuoVadis Limited, OU = OCSP Responder, CN = QuoVadis OCSP Authority Signature
        Produced At: Apr  9 12:09:10 2014 GMT
        Responses:
        Certificate ID:
          Hash Algorithm: sha1
          Issuer Name Hash: ED48ADDDCB7B00E20E842AA9B409F1AC3034CF96
          Issuer Key Hash: 50EA7389DB29FB108F9EE50120D4DE79994883F7
          Serial Number: 0114195F66FAFF8FD66E12496E516F4F
        Cert Status: unknown
        This Update: Apr  9 12:09:10 2014 GMT
    
        Response Extensions:
    

### Sources

  * <https://www.openssl.org/docs/apps/s_client.html>
  * <https://www.openssl.org/docs/apps/ocsp.html>
  * [https://en.wikipedia.org/wiki/Online _Certificate_ Status_Protocol][1]

   [1]: https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol
   [2]: https://www.digitalocean.com/?refcode=7435ae6b8212
   [3]: https://raymii.org/s/articles/OpenSSL_manually_verify_a_certificate_against_a_CRL.html

---

License:
All the text on this website is free as in freedom unless stated otherwise. 
This means you can use it in any way you want, you can copy it, change it 
the way you like and republish it, as long as you release the (modified) 
content under the same license to give others the same freedoms you've got 
and place my name and a link to this site with the article as source.

This site uses Google Analytics for statistics and Google Adwords for 
advertisements. You are tracked and Google knows everything about you. 
Use an adblocker like ublock-origin if you don't want it.

All the code on this website is licensed under the GNU GPL v3 license 
unless already licensed under a license which does not allows this form 
of licensing or if another license is stated on that page / in that software:

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Just to be clear, the information on this website is for meant for educational 
purposes and you use it at your own risk. I do not take responsibility if you 
screw something up. Use common sense, do not 'rm -rf /' as root for example. 
If you have any questions then do not hesitate to contact me.

See https://raymii.org/s/static/About.html for details.