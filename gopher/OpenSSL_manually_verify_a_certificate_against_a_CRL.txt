This is a text-only version of the following page on https://raymii.org:
---
Title       : 	OpenSSL: Manually verify a certificate against a CRL
Author      : 	Remy van Elst
Date        : 	22-03-2015
URL         : 	https://raymii.org/s/articles/OpenSSL_manually_verify_a_certificate_against_a_CRL.html
Format      : 	Markdown/HTML
---



This article shows you how to manually verfify a certificate against a CRL. CRL
stands for Certificate Revocation List and is one way to validate a certificate
status. It is an alternative to the OCSP, Online Certificate Status Protocol.

You can read more about CRL's on [Wikipedia][1].

If you want to validate a certificate against an OCSP, see [my article on that
here][2].

<p class="ad"> <a href="https://leafnode.nl">I'm developing an open source monitoring app called  Leaf Node Monitoring, for windows, linux & android. Go check it out!</a><br><br> <a href="https://github.com/sponsors/RaymiiOrg/">Consider sponsoring me on Github. It means the world to me if you show your appreciation and you'll help pay the server costs.</a><br><br> <a href="https://www.digitalocean.com/?refcode=7435ae6b8212">You can also sponsor me by getting a Digital Ocean VPS. With this referral link you'll get $100 credit for 60 days. </a><br><br> </p>


We will be using OpenSSL in this article. I'm using the following version:

    
    
    $ openssl version
    OpenSSL 1.0.2 22 Jan 2015
    

### Get a certificate with a CRL

First we will need a certificate from a website. I'll be using Wikipedia as an
example here. We can retreive this with the following openssl command:

    
    
    openssl s_client -connect wikipedia.org:443 2>&1 < /dev/null | sed -n '/-----BEGIN/,/-----END/p'
    

Save this output to a file, for example, wikipedia.pem:

    
    
    openssl s_client -connect wikipedia.org:443 2>&1 < /dev/null | sed -n '/-----BEGIN/,/-----END/p' > wikipedia.pem
    

Now, check if this certificate has an CRL URI:

    
    
    openssl x509 -noout -text -in wikipedia.pem | grep -A 4 'X509v3 CRL Distribution Points'
    X509v3 CRL Distribution Points: 
        Full Name:
          URI:http://crl.globalsign.com/gs/gsorganizationvalsha2g2.crl
    

If it does not give any output, the certificate has no CRL URI. You cannot
valdiate it against a CRL.

Download the CRL:

    
    
    wget -O crl.der http://crl.globalsign.com/gs/gsorganizationvalsha2g2.crl
    

The CRL will be in `DER` (binary) format. The OpenSSL command needs it in PEM
(base64 encoded DER) format, so convert it:

    
    
    openssl crl -inform DER -in crl.der -outform PEM -out crl.pem
    

### Getting the certificate chain

It is required to have the certificate chain together with the certificate you
want to validate. So, we need to get the certificate chain for our domain,
`wikipedia.org`. Using the `-showcerts` option with `openssl s_client`, we can
see all the certificates, including the chain:

    
    
    openssl s_client -connect wikipedia.org:443 -showcerts 2>&1 < /dev/null
    

Results in a lot of output, but what we are interested in is the following:

    
    
     1 s:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert High Assurance CA-3
       i:/C=US/O=DigiCert Inc/OU=www.digicert.com/CN=DigiCert High Assurance EV Root CA
    -----BEGIN CERTIFICATE-----
    MIIGWDCCBUCgAwIBAgIQCl8RTQNbF5EX0u/UA4w/OzANBgkqhkiG9w0BAQUFADBs
    MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
    d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j
    ZSBFViBSb290IENBMB4XDTA4MDQwMjEyMDAwMFoXDTIyMDQwMzAwMDAwMFowZjEL
    MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3
    LmRpZ2ljZXJ0LmNvbTElMCMGA1UEAxMcRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug
    Q0EtMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL9hCikQH17+NDdR
    CPge+yLtYb4LDXBMUGMmdRW5QYiXtvCgFbsIYOBC6AUpEIc2iihlqO8xB3RtNpcv
    KEZmBMcqeSZ6mdWOw21PoF6tvD2Rwll7XjZswFPPAAgyPhBkWBATaccM7pxCUQD5
    BUTuJM56H+2MEb0SqPMV9Bx6MWkBG6fmXcCabH4JnudSREoQOiPkm7YDr6ictFuf
    1EutkozOtREqqjcYjbTCuNhcBoz4/yO9NV7UfD5+gw6RlgWYw7If48hl66l7XaAs
    zPw82W3tzPpLQ4zJ1LilYRyyQLYoEt+5+F/+07LJ7z20Hkt8HEyZNp496+ynaF4d
    32duXvsCAwEAAaOCAvowggL2MA4GA1UdDwEB/wQEAwIBhjCCAcYGA1UdIASCAb0w
    ggG5MIIBtQYLYIZIAYb9bAEDAAIwggGkMDoGCCsGAQUFBwIBFi5odHRwOi8vd3d3
    LmRpZ2ljZXJ0LmNvbS9zc2wtY3BzLXJlcG9zaXRvcnkuaHRtMIIBZAYIKwYBBQUH
    AgIwggFWHoIBUgBBAG4AeQAgAHUAcwBlACAAbwBmACAAdABoAGkAcwAgAEMAZQBy
    AHQAaQBmAGkAYwBhAHQAZQAgAGMAbwBuAHMAdABpAHQAdQB0AGUAcwAgAGEAYwBj
    AGUAcAB0AGEAbgBjAGUAIABvAGYAIAB0AGgAZQAgAEQAaQBnAGkAQwBlAHIAdAAg
    AEMAUAAvAEMAUABTACAAYQBuAGQAIAB0AGgAZQAgAFIAZQBsAHkAaQBuAGcAIABQ
    AGEAcgB0AHkAIABBAGcAcgBlAGUAbQBlAG4AdAAgAHcAaABpAGMAaAAgAGwAaQBt
    AGkAdAAgAGwAaQBhAGIAaQBsAGkAdAB5ACAAYQBuAGQAIABhAHIAZQAgAGkAbgBj
    AG8AcgBwAG8AcgBhAHQAZQBkACAAaABlAHIAZQBpAG4AIABiAHkAIAByAGUAZgBl
    AHIAZQBuAGMAZQAuMBIGA1UdEwEB/wQIMAYBAf8CAQAwNAYIKwYBBQUHAQEEKDAm
    MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2VydC5jb20wgY8GA1UdHwSB
    hzCBhDBAoD6gPIY6aHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0SGln
    aEFzc3VyYW5jZUVWUm9vdENBLmNybDBAoD6gPIY6aHR0cDovL2NybDQuZGlnaWNl
    cnQuY29tL0RpZ2lDZXJ0SGlnaEFzc3VyYW5jZUVWUm9vdENBLmNybDAfBgNVHSME
    GDAWgBSxPsNpA/i/RwHUmCYaCALvY2QrwzAdBgNVHQ4EFgQUUOpzidsp+xCPnuUB
    INTeeZlIg/cwDQYJKoZIhvcNAQEFBQADggEBAB7ipUiebNtTOA/vphoqrOIDQ+2a
    vD6OdRvw/S4iWawTwGHi5/rpmc2HCXVUKL9GYNy+USyS8xuRfDEIcOI3ucFbqL2j
    CwD7GhX9A61YasXHJJlIR0YxHpLvtF9ONMeQvzHB+LGEhtCcAarfilYGzjrpDq6X
    dF3XcZpCdF/ejUN83ulV7WkAywXgemFhM9EZTfkI7qA5xSU1tyvED7Ld8aW3DiTE
    JiiNeXf1L/BXunwH1OH8zVowV36GEEfdMR/X/KLCvzB8XSSq6PmuX2p0ws5rs0bY
    Ib4p1I5eFdZCSucyb6Sxa1GDWL4/bcf72gMhy2oWGU4K8K2Eyl2Us1p292E=
    -----END CERTIFICATE-----
    

As you can see, this is number 1. Number 0 is the certificate for Wikipedia, we
already have that. If your site has more certificates in its chain, you will see
more here. Save them all, in the order OpenSSL sends them (as in, first the one
which directly issued your server certificate, then the one that issues that
certificate and so on, with the root or most-root at the end of the file) to a
file, named `chain.pem`.

You can use the following command to save all the certificates OpenSSL command
returns to a file named `chain.pem`. See [this article for more
information)[https://raymii.org/s/articles/OpenSSL _-_ Get _all_ certificates
_from_ a _website_ in _plain_ text.html).

    
    
    OLDIFS=$IFS; IFS=':' certificates=$(openssl s_client -connect wikipedia.org:443 -showcerts -tlsextdebug -tls1 2>&1 </dev/null | sed -n '/-----BEGIN/,/-----END/ {/-----BEGIN/ s/^/:/; p}'); for certificate in ${certificates#:}; do echo $certificate | tee -a chain.pem ; done; IFS=$OLDIFS 
    

### Combining the CRL and the Chain

The Openssl command needs both the certificate chain and the CRL, in PEM format
concatenated together for the validation to work. You can omit the CRL, but then
the CRL check will not work, it will just validate the certificate against the
chain.

    
    
    cat chain.pem crl.pem > crl_chain.pem
    

### OpenSSL Verify

We now have all the data we need can validate the certificate.

    
    
    $ openssl verify -crl_check -CAfile crl_chain.pem wikipedia.pem 
    wikipedia.pem: OK
    

Above shows a good certificate status.

### Revoked certificate

If you have a revoked certificate, you can also test it the same way as stated
above. The response looks like this:

    
    
    $ openssl verify -crl_check -CAfile crl_chain.pem revoked-test.pem 
    revoked-test.pem: OU = Domain Control Validated, OU = PositiveSSL, CN = xs4all.nl
    error 23 at 0 depth lookup:certificate revoked
    

You can test this using the certificate and chain on the Verisign revoked
certificate test page: .

   [1]: https://en.wikipedia.org/wiki/Revocation_list
   [2]: https://raymii.org/s/articles/OpenSSL_Manually_Verify_a_certificate_against_an_OCSP.html
   [3]: https://www.digitalocean.com/?refcode=7435ae6b8212

---

License:
All the text on this website is free as in freedom unless stated otherwise. 
This means you can use it in any way you want, you can copy it, change it 
the way you like and republish it, as long as you release the (modified) 
content under the same license to give others the same freedoms you've got 
and place my name and a link to this site with the article as source.

This site uses Google Analytics for statistics and Google Adwords for 
advertisements. You are tracked and Google knows everything about you. 
Use an adblocker like ublock-origin if you don't want it.

All the code on this website is licensed under the GNU GPL v3 license 
unless already licensed under a license which does not allows this form 
of licensing or if another license is stated on that page / in that software:

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Just to be clear, the information on this website is for meant for educational 
purposes and you use it at your own risk. I do not take responsibility if you 
screw something up. Use common sense, do not 'rm -rf /' as root for example. 
If you have any questions then do not hesitate to contact me.

See https://raymii.org/s/static/About.html for details.