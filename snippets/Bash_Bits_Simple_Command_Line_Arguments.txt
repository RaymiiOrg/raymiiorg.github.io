This is a text-only version of the following page on https://raymii.org:
---
Title       : 	Bash Bits: Simple command line arguments
Author      : 	Remy van Elst
Date        : 	30-12-2013
URL         : 	https://raymii.org/s/snippets/Bash_Bits_Simple_Command_Line_Arguments.html
Format      : 	Markdown/HTML
---



Bash Bits are small examples and tips for Bash Scripts. This bash bit shows you
how to add command line arguments to your script. It is very simple, non-
positional and does not use getopts.

<p class="ad"> <b>Recently I removed all Google Ads from this site due to their invasive tracking, as well as Google Analytics. Please, if you found this content useful, consider a small donation using any of the options below:</b><br><br> <a href="https://leafnode.nl">I'm developing an open source monitoring app called  Leaf Node Monitoring, for windows, linux & android. Go check it out!</a><br><br> <a href="https://github.com/sponsors/RaymiiOrg/">Consider sponsoring me on Github. It means the world to me if you show your appreciation and you'll help pay the server costs.</a><br><br> <a href="https://www.digitalocean.com/?refcode=7435ae6b8212">You can also sponsor me by getting a Digital Ocean VPS. With this referral link you'll get $100 credit for 60 days. </a><br><br> </p>


[All Bash Bits can be found using this link][2]

Sometimes a script need to have a variable which you don't know on forehand or
can change later. Or you have a script which works on a file, therefore you need
a filename. For example, when you have a script that adds a watermark to an
image. It is nice if you can give both the filename and the watermark as
parameters to the script.

Note that this is very very simple. The arguments must be given in order and it
does not support parameters like `--file/-f`. If you need something quick and
simple, this is very usable, if you need something more advanced it might be
better to take a look at `getopts` or `shift`.

The following example takes one required parameter, and one optional one. If the
first (filename) is not given, an error message plus usage is printed and the
script exits. A second parameter can be given but is optional. If that is not
given the script will use the default.

By using the `-z` option in the `if` statement, we check if the variable is
null, that is, has zero length.

    
    
    if [[ -z "${1}" ]]; then
        echo -e "[ERROR] Please give a filename to watermark and an optional watermark. Otherwise the default is used."
        echo -e "${0} example.jpg"
        exit 255
    
    else
        FILE="${1}"
    fi
    
    if [[ -z "${2}" ]]; then
        WATERMARK="Picture Watermark"
    
    else
        WATERMARK="${2}"
    fi
    

   [1]: https://www.digitalocean.com/?refcode=7435ae6b8212
   [2]: https://raymii.org/s/tags/bash-bits.html

---

License:
All the text on this website is free as in freedom unless stated otherwise. 
This means you can use it in any way you want, you can copy it, change it 
the way you like and republish it, as long as you release the (modified) 
content under the same license to give others the same freedoms you've got 
and place my name and a link to this site with the article as source.

This site uses Google Analytics for statistics and Google Adwords for 
advertisements. You are tracked and Google knows everything about you. 
Use an adblocker like ublock-origin if you don't want it.

All the code on this website is licensed under the GNU GPL v3 license 
unless already licensed under a license which does not allows this form 
of licensing or if another license is stated on that page / in that software:

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Just to be clear, the information on this website is for meant for educational 
purposes and you use it at your own risk. I do not take responsibility if you 
screw something up. Use common sense, do not 'rm -rf /' as root for example. 
If you have any questions then do not hesitate to contact me.

See https://raymii.org/s/static/About.html for details.