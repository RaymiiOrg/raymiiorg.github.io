This is a text-only version of the following page on https://raymii.org:
---
Title       : 	Only zero is false, everything else is true in C++
Author      : 	Remy van Elst
Date        : 	12-07-2019
URL         : 	https://raymii.org/s/snippets/Cpp_Only_zero_is_false.html
Format      : 	Markdown/HTML
---



Some of the code I work on does the following, mostly because it's older C style
code now used in a C++ context:

* Have a value that can be changed by a user.
* If that value is not set, it is set to `-1`
* That variable, when set to a number, is what a function will use

Zero in this context means that it can be changed but is set to 0. `-1` sometimes
means it can not be edited, but sometimes means it's off. Most of the cases I find 
where this is used do it this way to save memory.

(This gives a host of other problems, like, how to preserve the value when
(turning it off and later just turning it back on?)

Sometimes this variable is checked for true-ness by using a boolean conversion, 
like this:

    if (variable) {
        do_stuff();
    }

Only if the variable is zero, this check will not execute. If it's set to `-1`,
the boolean conversion will convert to `true`, which might not be what you meant.
What you want to check for is:

    if (variable > 0) {
        do_stuff();
    }

But better would be to have a seperate variable for the `on/off` and a seperate 
variable for the actual value to use. 

This is oversimplified and for seasoned programmers this will be nothing new,
however I found it interesting. 

<p class="ad"> <b>Recently I removed all Google Ads from this site due to their invasive tracking, as well as Google Analytics. Please, if you found this content useful, consider a small donation using any of the options below:</b><br><br> <a href="https://leafnode.nl">I'm developing an open source monitoring app called  Leaf Node Monitoring, for windows, linux & android. Go check it out!</a><br><br> <a href="https://github.com/sponsors/RaymiiOrg/">Consider sponsoring me on Github. It means the world to me if you show your appreciation and you'll help pay the server costs.</a><br><br> <a href="https://www.digitalocean.com/?refcode=7435ae6b8212">You can also sponsor me by getting a Digital Ocean VPS. With this referral link you'll get $200 credit for 60 days. Spend $25 after your credit expires and I'll get $25!</a><br><br> </p>


### Implicit conversion rules to booleans

The rules for implicit conversion, which is what's happening when you use
something else as a boolean, are described [here][1].

[1]: https://en.cppreference.com/w/cpp/language/implicit_conversion

Quoting:

> A prvalue of integral, floating-point, unscoped enumeration, pointer, and
    pointer-to-member types can be converted to a prvalue of type bool. The
    value zero (for integral, floating-point, and unscoped enumeration) and the
    null pointer and the null pointer-to-member values become false. All other
    values become true. 
 
Here is my example code:

    #include <iostream>

    int main () {
        bool boolMinOne;
        bool boolPlusOne;
        bool boolZero;
        bool boolnullptr;
        bool boolPtr;
        
        int intPlusOne { 1 };
        int intMinOne { -1 };
        int intZero { 0 };
        
        int* intPtr { &intPlusOne };
        int* nullPtr { nullptr };
        
        boolMinOne = intMinOne;
        boolPlusOne = intPlusOne;
        boolZero = intZero;
        boolPtr = intPtr;
        boolnullptr = nullPtr;
        
        std::cout << "boolMinOne: " << boolMinOne << "\n";
        std::cout << "boolPlusOne: " << boolPlusOne << "\n";
        std::cout << "boolZero: " << boolZero << "\n";
        std::cout << "boolNullptr: " << boolnullptr << "\n";
        std::cout << "boolPtr: " << boolPtr << "\n";
        
        return 0;
    }

Result:

    boolMinOne: 1
    boolPlusOne: 1
    boolZero: 0
    boolNullptr: 0
    boolPtr: 1



---

License:
All the text on this website is free as in freedom unless stated otherwise. 
This means you can use it in any way you want, you can copy it, change it 
the way you like and republish it, as long as you release the (modified) 
content under the same license to give others the same freedoms you've got 
and place my name and a link to this site with the article as source.

This site uses Google Analytics for statistics and Google Adwords for 
advertisements. You are tracked and Google knows everything about you. 
Use an adblocker like ublock-origin if you don't want it.

All the code on this website is licensed under the GNU GPL v3 license 
unless already licensed under a license which does not allows this form 
of licensing or if another license is stated on that page / in that software:

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Just to be clear, the information on this website is for meant for educational 
purposes and you use it at your own risk. I do not take responsibility if you 
screw something up. Use common sense, do not 'rm -rf /' as root for example. 
If you have any questions then do not hesitate to contact me.

See https://raymii.org/s/static/About.html for details.