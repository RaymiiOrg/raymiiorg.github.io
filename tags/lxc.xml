<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag lxc on Raymii.org</title> 
            <link>https://raymii.org/s/tags/lxc.xml</link> 
            <description>RSS feed for tag lxc on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/lxc.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Proxmox VE 7 Corosync QDevice in a Docker container</title> 
                <link>https://raymii.org/s/tutorials/Proxmox_VE_7_Corosync_QDevice_in_Docker.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Proxmox_VE_7_Corosync_QDevice_in_Docker.html</guid>
                <description>At home I have a 2 node Proxmox VE cluster consisting of 2 HP EliteDesk Mini machines, both running with 16 GB RAM and both an NVMe and SATA SSD with ZFS on root (256 GB). It's small enough (physically) and is just enough for my homelab needs specs wise. Proxmox VE has support for clustering. For a cluster (in any sense of the word), you need at least 3 nodes, otherwise there is no quorum. Corosync, the cluster software used by Proxmox, supports an external Quorum device. This is a small piece of software running on a third node which provides an extra vote for the quorum. In my case I wanted to run this on my NAS, since (physical) space is a premium. The NAS supports Docker, this guide explains how to run the QDevice for Proxmox VE 7 in a Docker container. There is a qdevice Docker image on the Docker hub but that guide does not work for Proxmox VE 7 and requires a lot of manual setup. Using my method involves a lot less steps, since you're basically running an extra debian VPS (a container with systemd and openssh).</description> 
                <pubDate>Sun, 17 Apr 2022 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 29 Jan 2024 04:30:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Limit specific process memory on desktop linux with cgroups and earlyoom</title> 
                <link>https://raymii.org/s/articles/Limit_specific_process_memory_on_desktop_linux_with_cgroups.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Limit_specific_process_memory_on_desktop_linux_with_cgroups.html</guid>
                <description>On my laptop I recently had trouble with out of memory issues when running `clion`, `firefox`, `thunderbird`, `teams` and a virtualbox VM. To combat this, I've setup cgroups to limit how much RAM specific applications can use and configured `earlyoom`, a very nifty tool that checks available memory and kills the process with the highest `oom_score` if available memory falls below 5%. Otherwise, my laptop would first grind to a halt (even without swap) and only after half an hour of seemingly being stuck would the OOM killer kick in. With `earlyoom` this hanging behavior is gone, although sometimes applications get killed when I don't expect it. I've given firefox, thunderbird and teams a cgroup with memory limit and clion and virtualbox use their own configuration to limit their RAM usage.This post details how to setup `cgroups` to limit memory of specific processes including automatically placing process inside a cgroup.</description> 
                <pubDate>Sat, 13 Feb 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 13 Feb 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>IPv6 in a Docker container on a non-ipv6 network</title> 
                <link>https://raymii.org/s/articles/IPv6_in_a_Docker_container_on_a_non-ipv6_network.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/IPv6_in_a_Docker_container_on_a_non-ipv6_network.html</guid>
                <description>At work and at home my ISP's have native IPv6. I recently was at a clients location where they had no IPv6 at all and had to set up and demonstrate an application in a Docker container with IPv6 functionality. They said the had IPv6 but on location it appeared that IPv6 wasn't working. Since IPv6 was required for the demo the container needed a workaround. This article describes the workaround I used to add IPv6 to a Docker container on a non IPv6 network.</description> 
                <pubDate>Tue, 12 Apr 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 12 Apr 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Linux Containers</title> 
                <link>https://raymii.org/s/articles/Linux_Containers.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Linux_Containers.html</guid>
                <description>This article goes over Linux Containers. It touches both bare linux cgroups and namespaces and goes over LXC (linux conrainers).</description> 
                <pubDate>Thu, 12 Nov 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 12 Nov 2015 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    