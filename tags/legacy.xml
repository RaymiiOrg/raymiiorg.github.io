<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag legacy on Raymii.org</title> 
            <link>https://raymii.org/s/tags/legacy.xml</link> 
            <description>RSS feed for tag legacy on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/legacy.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>All packages that were present in Ubuntu 18.04 but absent in Ubuntu 20.04</title> 
                <link>https://raymii.org/s/articles/All_packages_that_were_present_in_Ubuntu_18.04_but_removed_in_20.04.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/All_packages_that_were_present_in_Ubuntu_18.04_but_removed_in_20.04.html</guid>
                <description>Otherwise titled `Figure out the differences between two apt repositories`. Recently I've had a few packages that I often use but were missing from Ubuntu 20.04 LTS. One is [ckermit](/s/blog/Ive_packaged_up_CKermit_as_a_snap_for_Ubuntu_20.04.html) and the other is [gnash](/s/blog/Ive_packaged_up_Gnash_as_a_Snap_for_modern_linux.html), both of which I 'converted' to a snap. (In air quotes because I just converted the 18.04 deb). This made me wonder if I could figure out a list of that are present in Ubuntu 18.04, but absent in Ubuntu 20.04. As `apt` and `dpkg` are standardized tools and and package formats, we can use a few shell tools to parse the package lists and compare them side by side.
This post shows you how to do the comparison yourself and I discuss the removed packages a bit. Some are version increments (like `gcc-6` in Ubuntu 18.04 but `gcc-7`in Ubuntu 20.04),  and some are packages that were combined into one instead of split up  (like `ltsp` in Ubuntu 20.04 but a bunch of seperate `ltsp-$postfix` packages instead  in Ubuntu 18.04). Many others are just replaced by newer versions (`python-ceph` vs `python3-ceph`). The list of differences is provided as a download, both ways.</description> 
                <pubDate>Wed, 19 May 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 19 May 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>It compiles does not always mean that it works, a tale of virtual overridden fun in C++</title> 
                <link>https://raymii.org/s/articles/It_compiles_does_not_always_means_that_it_works.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/It_compiles_does_not_always_means_that_it_works.html</guid>
                <description>In a [recent article on clang-tidy](/s/snippets/Run_one_specific_clang-tidy_check_on_your_codebase.html) I referenced the fact that we're doing a huge refactoring regarding `char` pointers, lifetime, ownership and `std::strings`. Todays post is another one related to that change, where even though everything compiled correctly, it didn't `work`. For a compiled language, that is not something you expect. Next to unit tests, a compiler error is your number one sign that you've made a mistake somewhere.
In this case however, the code all compiled fine. The issue here was an older part of the code not using `override` combined with automated refactoring in CLion missing some parts of the code during a change. So, the issue in this case is entirely our own fault, it was spotted in the manual testing, but I'd rather had it not happen at all.
In this post I'll describe the problem including some example code that illustrates what happened. My key point is that even though the code compiles, you should always test it, preferably automated with unit and integrations tests, otherwise manually with a runbook.</description> 
                <pubDate>Wed, 12 May 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 14 May 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Run one specific clang-tidy check on your entire codebase</title> 
                <link>https://raymii.org/s/snippets/Run_one_specific_clang-tidy_check_on_your_codebase.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Run_one_specific_clang-tidy_check_on_your_codebase.html</guid>
                <description>Recently I did a major refactor on a piece of code that involved thousands of lines of code which were in one  way or another related to string handling. All of the code handled `char*` (C style character pointer arrays) and the concept of `const` or ownership was literally unknown in that part of the codebase. The refactored code uses `std::string`'s, but due to the legacy nature, a large number of methods returned `nullptr`'s instead of empty strings. I understand why this was done, but finding all those instances and the fact it only gives a runtime error was a bit of a bummer.
Luckily `clang-tidy` is here to save the day. In my IDE, CLion, it gives a warning when you return a `nullptr`. It however does that only in the file you're currently editing, and since we're talking millions of files, I wasn't going to open them by hand. You can run `clang-tidy` easily on one file, and it's not hard to run it on an entire codebase as well, using  the script `run-clang-tidy.py`, provided in their packages.
This snippet shows you how to run one specific `clang-tidy` check, in my case, `bugprone-string-constructor`, on a (cmake and C++) codebase.</description> 
                <pubDate>Mon, 05 Apr 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 05 Apr 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Reddit Gold for Caldera Openlinux 1.2</title> 
                <link>https://raymii.org/s/blog/Reddit_Gold_for_Caldera_Openlinux_1.2.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Reddit_Gold_for_Caldera_Openlinux_1.2.html</guid>
                <description>Someone liked my Reddit post regarding a few old CD's I found of Caldera Openlinux 1.2, including source code and floppies so much they gilded it. I got some special internet points today.</description> 
                <pubDate>Wed, 26 Sep 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 26 Sep 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>snap install mosaic, the first graphical webbrowser on Ubuntu</title> 
                <link>https://raymii.org/s/blog/snap_install_mosaic_the_first_graphical_webbrowser_on_Ubuntu.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/snap_install_mosaic_the_first_graphical_webbrowser_on_Ubuntu.html</guid>
                <description>On one of my favorite podcasts from Jupiter Broadcasting, either Linux Action News or Linux unplugged (252 I think, not sure), Allan Pope was talking about Snap packages and how there are now WinePacks, a snap with Wine and a single (Windows) application packaged. During the discussion he dropped that Mosaic, the first graphical web browser, is available as a snap package, for modern distributions. I installed it, after huge download (1.5 MB), playing around with it is quite fun. In this post I'll discuss how to install it, what works and what doens't in the modern age on Ubuntu 18.04</description> 
                <pubDate>Thu, 14 Jun 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 14 Jun 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    