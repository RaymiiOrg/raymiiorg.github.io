<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag vnc on Raymii.org</title> 
            <link>https://raymii.org/s/tags/vnc.xml</link> 
            <description>RSS feed for tag vnc on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/vnc.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Expose any Qt5 program via VNC</title> 
                <link>https://raymii.org/s/articles/Expose_any_QT_program_via_VNC.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Expose_any_QT_program_via_VNC.html</guid>
                <description>A few months ago I wrote about [Microsoft Teams running on a coffee machine. That was a fun work experiment where I got a VNC client running on the Linux-based coffee machines that we produce at work. In the comments on hackernews Jean-Micha&amp;euml;l Celerier pointed me to the reverse, a way to expose any Qt application over VNC. This article shows you how I use this feature to work on our Qt 5 based coffee machine frontend as well as how you can use this on your machine, for example, to expose Dolphin, the KDE file manager, over VNC.</description> 
                <pubDate>Mon, 20 Sep 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 20 Sep 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Remote desktop on NetBSD with Xnest (no VNC)</title> 
                <link>https://raymii.org/s/articles/Remote_desktop_on_NetBSD_with_Xnest_no_VNC.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Remote_desktop_on_NetBSD_with_Xnest_no_VNC.html</guid>
                <description>After I recently wrote about NetBSD on the DEC Alpha CPU in QEMU, I decided to play with NetBSD some more. One x86_64 virtual machine later, I'm starting to appreciate the beauty and simplicity. Great documentation, both online and via the manpages, low resource usage and boy oh boy does it feel fast. But, you're not here for my love letter, you want to have a remote desktop. In the earlier article, we set up VNC, both because it shows you how to install packages and because native X11 crashes. In this article, we are going to set up X11 forwarding via SSH, but with `Xnest` instead of VNC. `Xnest` allows you to have a full desktop / window manager inside a window. If you did a full install of NetBSD, then all you need is included on the system, no need to install any packages. This is an advantage if you are on an architecture that has no precompiled binary packages or if compiling from source takes too long.</description> 
                <pubDate>Sun, 22 Aug 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 22 Aug 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Run MS Teams on a coffee machine?!? (Or: Embedded Linux Framebuffer VNC client)</title> 
                <link>https://raymii.org/s/blog/MS_Teams_on_a_Coffee_Machine_or_Framebuffer_VNC_Client.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/MS_Teams_on_a_Coffee_Machine_or_Framebuffer_VNC_Client.html</guid>
                <description> To fill some time [during compiling](https://xkcd.com/303/) I tried to get a VNC client running on a coffee machine, specifically to show MS Teams. At work I develop software for these coffee machines in C++, which allows me to do such fun stuff, because from a software point of view, it's just an ARM PC running linux with a framebuffer for graphics. I compiled a few framebuffer VNC clients, fired up an SSH tunnel and used `x11vnc` to share one specific window and after a few attempts, Teams was up and running on my 'new' second monitor.
This post contains my little adventure in framebuffer VNC clients, but it's not a comprehensive guide as most of my other articles. Showing you how to set up an Openembedded server with a VariScite specific toolchain is way too much work to cross-compile a simple C program, but since that's my day job, why not use it for fun. It contains some tips for `x11vnc` and shows you two different framebuffer VNC clients, `fbvnc` and `directvnc`.</description> 
                <pubDate>Thu, 08 Apr 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 08 Apr 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    