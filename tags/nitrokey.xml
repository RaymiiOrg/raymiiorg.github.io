<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag nitrokey on Raymii.org</title> 
            <link>https://raymii.org/s/tags/nitrokey.xml</link> 
            <description>RSS feed for tag nitrokey on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/nitrokey.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Get started with the Nitrokey HSM or SmartCard-HSM</title> 
                <link>https://raymii.org/s/articles/Get_Started_With_The_Nitrokey_HSM.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Get_Started_With_The_Nitrokey_HSM.html</guid>
                <description>This is a guide to get started with the Nitrokey HSM (or SmartCard-HSM). It covers what a HSM is and what it can be used for. It also goes over software installation and initializing the device, including backups of the device and the keys. Finally we do some actual crypto operatons via pkcs11, OpenSSL, Apache and OpenSSH. We also cover usage in Thunderbird (S/MIME), Elementary Files (EF), a Web cluster with Apache and mod_nss and the decryption of the keys.</description> 
                <pubDate>Sun, 19 Jun 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 20 Jun 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Three new NitroKeys! Nitrokey Pro 2, Storage 2 and a FIDO-U2F Nitrokey</title> 
                <link>https://raymii.org/s/tutorials/Three_New_Nitrokeys_Pro_2_Storage_2_and_Fido_u2f.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Three_New_Nitrokeys_Pro_2_Storage_2_and_Fido_u2f.html</guid>
                <description>Last week I received several newsletters from Nitrokey. As you might know, I'm a fan of their (mostly open source) hardware security devices. Their newsletters introduced two new keys, the Nitrokey Pro 2 and the Nitrokey FIDO-U2F key. On their website I also saw the Nitrokey Storage Pro 2. This article is a summary of the newsletters and goes over the new features in the new hardware. It boils down to a new OpenPGP smartcard version (3.3, it was 2.1) in the Nitrokey Pro 2 and Storage 2. The FIDO-U2F device is an entirely new Nitrokey (with a button).</description> 
                <pubDate>Thu, 08 Nov 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 08 Nov 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>GPG noninteractive batch sign, trust and send gnupg keys</title> 
                <link>https://raymii.org/s/articles/GPG_noninteractive_batch_sign_trust_and_send_gnupg_keys.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/GPG_noninteractive_batch_sign_trust_and_send_gnupg_keys.html</guid>
                <description>Recently a team I consult for started using a shared password manager, pass. It uses GPG keys and presents itself as the standard unix password manager, but in essence it's nothing more than a wrapper around GPG encrypted files. We all had to generate new keys since the team is new and we were not allowed to use existing keys. Using a new, empty keyring, I generated my key and imported their keys. I wanted to trust, sign and publish all keys to a keyserver, this article shows how to do that noninteractively in batch form. Saves me doing the same thing four times, since now it's just four people, but next time it might be a hundred.</description> 
                <pubDate>Fri, 01 Jun 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 01 Jun 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Introducing the Yubikey Nano XL Rugged edition</title> 
                <link>https://raymii.org/s/blog/Introducing_the_Yubikey_Nano_XL_Rugged_Edition.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Introducing_the_Yubikey_Nano_XL_Rugged_Edition.html</guid>
                <description>Last month my Yubikey broke. I had a second one as a backup so there were no problems for me. This second yubikey is a Nano model, that means it is about 1 cm by 1 cm, the normal yubikey is 2 cm by 5. It fits inside the USB port and is meant to be inserted in the computer all the time. Extracting it from the port is hard as well, since it is so small. I use my yubikey on different machines and don't like the idea of it being in a computer when I'm not there, so I wanted to fix this. I did not fix it by buying a regular sized yubikey, but I found a clever workaround, which I name the Yubikey nano XL Rugged. You'll understand when you see the pictures.</description> 
                <pubDate>Fri, 27 Apr 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 27 Apr 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>My Yubikey broke, but I had a backup. So should you with your 2FA</title> 
                <link>https://raymii.org/s/blog/My_Yubikey_Broke_-_Important_tip_for_two_factor_BACKUP.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/My_Yubikey_Broke_-_Important_tip_for_two_factor_BACKUP.html</guid>
                <description>Today my trusty old first generation Yubikey didn't light up when I plugged it in. No problem for me, I had a backup key. But most people don't, so here's an important tip when you use two factor authentication like a Yubikey, Nitrokey or Google Authenticator (HOTP). TL;DR: Have a second hardware token stored away safely and backup your QR codes (print/screenshot) somewhere secure. Swap the hardware tokens often to make sure they both work with all services. Just as with regular data, make backups and test restores.</description> 
                <pubDate>Sun, 18 Mar 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 18 Mar 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Nitrokey gnuk firmware update via DFU</title> 
                <link>https://raymii.org/s/tutorials/Nitrokey_gnuk_firmware_update_via_DFU.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Nitrokey_gnuk_firmware_update_via_DFU.html</guid>
                <description>The Nitrokey (start, all of them) can be upgraded to a newer GNUK firmware. However, this can only be done via ST Link or DFU, if you use the Gnuk USB firmware upgrade you will brick the device. This guide shows you how to attach a DFU adapter and how to flash firmware to a Nitrokey, both for upgrading or unbricking an USB upgraded one.</description> 
                <pubDate>Tue, 11 Oct 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 11 Oct 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>FST-01 gnuk firmware update via USB</title> 
                <link>https://raymii.org/s/tutorials/FST-01_firmware_upgrade_via_usb.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/FST-01_firmware_upgrade_via_usb.html</guid>
                <description>The FST-01 (Flying Stone 1) is a small STM32F103TB based USB device designed to run gnuk and NeuG (gpg usb token or true random number generator). This guide shows you how to upgrade the firmware on the FST-01 so that you can enjoy newer gnuk features like 4096 bit RSA keys.</description> 
                <pubDate>Fri, 09 Sep 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 09 Sep 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Nitrokey Start: Getting started guide (gnuk openpgp token)</title> 
                <link>https://raymii.org/s/articles/Nitrokey_Start_Getting_started_guide.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Nitrokey_Start_Getting_started_guide.html</guid>
                <description>The Nitrokey Start is an OpenPGP USB token. It supports three 2048 bit GPG keys and is based on gnuk. Gnuk is an implementation of USB cryptographic token for GPG. Cryptographic token is a store of private keys and it computes cryptographic functions on the device. The main difference with other GPG cards like the Nitrokey Pro or the OpenPGP card is that this device does not use a smartcard. Whereas the other devices are basically USB smartcard readers, the Nitrokey Start has everything in it's firmware. This article is a getting started guide where I talk about the initial setup of the device, setting up a user PIN, an admin PIN and a reset code, generating the key and subkeys on the device, or loading external keys into the device and usage examples with GPG, OpenSSH and Thunderbird.</description> 
                <pubDate>Sun, 14 Aug 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 14 Aug 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Nitrokey HSM/SmartCard-HSM and Raspberry Pi web cluster</title> 
                <link>https://raymii.org/s/articles/Nitrokey_HSM_web_cluster.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Nitrokey_HSM_web_cluster.html</guid>
                <description>This article sets up a Nitrokey HSM/SmartCard-HSM web cluster and has a lot of benchmarks. This specific HSM is not a fast HSM since it's very inexpensive and targeted at secure key storage, not performance. But, what if you do want more performance? Then you scale horizontally, just add some more HSM's and a loadbalancer in front. The cluster consists of Raspberry Pi's and Nitrokey HSM's and SmartCard-HSM's, softwarewise we use Apache, `mod_nss` and haproxy. We benchmark a small HTML file and a Wordpress site, with a regular 4096 bit RSA certificate without using the HSM's, a regular 2048 bit RSA certificate without using the HSM's, a 2048 bit RSA certificate in the HSM, a 1024 bit RSA certificate in the HSM and an EC prime256v1 key in the HSM. We do these benchmarks with the `OpenSC` module and with the `sc-hsm-embedded` module to see if that makes any difference.</description> 
                <pubDate>Mon, 01 Aug 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 01 Aug 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Raspberry Pi unattended upgrade Raspbian to Debian Testing</title> 
                <link>https://raymii.org/s/blog/Raspberry_Pi_Raspbian_Unattended_Upgrade_Jessie_to_Testing.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Raspberry_Pi_Raspbian_Unattended_Upgrade_Jessie_to_Testing.html</guid>
                <description>I'm working on a Nitrokey/SmartCard-HSM cluster article and therefore I needed three identical computers. The current version of Raspbian (2016-05-27) is based on Debian Jessie and comes with a version of OpenSC that is too old (0.14) to work with the Nitrokey/SmartCard-HSM. Since there is no Ubuntu 16.04 official image yet I decided to upgrade Raspbian to Debian Testing. Since I don't want to answer yes to any config file changes or service restarts I figured out how to do an unattended dist-upgrade.</description> 
                <pubDate>Wed, 27 Jul 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 27 Jul 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Storing arbitraty data in the Nitrokey HSM/SmartCard-HSM with Elementary Files (EF)</title> 
                <link>https://raymii.org/s/articles/Storing_arbitraty_data_in_the_Nitrokey_HSM.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Storing_arbitraty_data_in_the_Nitrokey_HSM.html</guid>
                <description>This is a guide which shows you how to write small elementary files to a nitrokey HSM. This can be usefull if you want to securely store data protected by a user pin. You can enter the wrong pin only three times, so offline brute forcing is out of the picture.</description> 
                <pubDate>Sun, 17 Jul 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 17 Jul 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Use the Nitrokey HSM or SmartCard-HSM with sc-hsm-embedded, mod_nss and Apache (read only module)</title> 
                <link>https://raymii.org/s/articles/Use_the_Nitrokey_HSM_or_SmartCard-HSM_with_sc-hsm-embedded_mod_nss_and_Apache_read_only_module.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Use_the_Nitrokey_HSM_or_SmartCard-HSM_with_sc-hsm-embedded_mod_nss_and_Apache_read_only_module.html</guid>
                <description>This is a guide on using the Nitrokey HSM with sc-hsm-embedded module instead of the PC/SC daemon and OpenSC, mod_nss and the Apache webserver. This is an extension on the earlier guide, with new benchmarks. The sc-hsm-embedded module is not using a global lock like OpenSC, therefore providing better performance. The sc-hsm-embedded module is also a read only module, suitable for embedded systems or secure systems. The HSM allows you to store the private key for a SSL certificate inside the HSM (instead of on the filesystem), so that it can never leave the device and thus never be stolen. The guide covers the installation of the sc-hsm-embedded module, configuration of and benchmarks from Apache with the HSM and different key sizes.</description> 
                <pubDate>Fri, 15 Jul 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 15 Jul 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Decrypt/Extract Nitrokey HSM/SmartCard-HSM RSA private keys</title> 
                <link>https://raymii.org/s/articles/Decrypt_NitroKey_HSM_or_SmartCard-HSM_private_keys.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Decrypt_NitroKey_HSM_or_SmartCard-HSM_private_keys.html</guid>
                <description>This is a guide which shows you how to extract private RSA key material from the Nitrokey HSM / SmartCard-HSM using the DKEK. This way you can get the private key out of the HSM in an unencrypted form. It does require access to the HSM device, all the DKEK share and their passwords. Do note that doing this defeats the entire purpose of a HSM, namely that you never have access to the keys. In the article I'll go over some explanation why this might be a feature you need and why it might be a case of security over convinience.</description> 
                <pubDate>Wed, 13 Jul 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 13 Jul 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Use the Nitrokey HSM or SmartCard-HSM with mod_nss and Apache</title> 
                <link>https://raymii.org/s/articles/Nitrokey_HSM_in_Apache_with_mod_nss.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Nitrokey_HSM_in_Apache_with_mod_nss.html</guid>
                <description>This is a guide on using the Nitrokey HSM with mod_nss and the Apache webserver. The HSM allows you to store the private key for a SSL certificate inside the HSM (instead of on the filesystem), so that it can never leave the device and thus never be stolen. The guide covers the installation and configuration of mod_nss, coupling the HSM to NSS, generating the keys and configuring Apache, and last but not least we also do some benchmarks on Apache with the HSM and different key sizes.</description> 
                <pubDate>Tue, 21 Jun 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 21 Jun 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    