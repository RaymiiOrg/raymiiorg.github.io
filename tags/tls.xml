<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag tls on Raymii.org</title> 
            <link>https://raymii.org/s/tags/tls.xml</link> 
            <description>RSS feed for tag tls on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/tls.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Which Root Certificates should you trust? Find out with CertInfo</title> 
                <link>https://raymii.org/s/software/Which_Root_Certificates_Should_You_Trust_CertInfo.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/Which_Root_Certificates_Should_You_Trust_CertInfo.html</guid>
                <description> Which Root Certificates should you trust? Did you know that any certificate authority can issue a certificate for any website? There are protocols in place so that should not happen, but when (not if, when) they get hacked or coerced by their government, they can issue a certificate to intercept secure communication for any website.
I've made an open source program, [CertInfo](https://github.com/raymiiOrg/certinfo) that analyzes your browser history and queries all visited domains for their certificates. It presents a list of used root certificates (meaning, a website you visited was ultimately signed by that root CA) and a list of unused root certificates (meaning, no website in your analyzed history was signed by that root CA). </description> 
                <pubDate>Mon, 01 Jan 2024 09:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 15 Jan 2024 22:03:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>APT keeps complaining that the HTTPS certificate cannot be validated?</title> 
                <link>https://raymii.org/s/blog/Syncthing_apt_repo_keeps_complaining_HTTPS_certificate_could_not_be_validated.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Syncthing_apt_repo_keeps_complaining_HTTPS_certificate_could_not_be_validated.html</guid>
                <description>Recently a few of my Ubuntu 20.04 and Debian 11 servers failed to run an `apt update` because it insisted that the HTTPS certificate for a repository could not be validated, while `curl` on the same system had no issues connecting. Join me on a deep dive into certificate validation and troubleshooting `apt`, digging into the C++ source code for `apt` and `GnuTLS` and in the end, it turned out to be my own fault due to permission on a folder. However, the error messages were totally unhelpful resolving the mysterious validation problem. This article was written over the period of a few days, chronologically during troubleshooting.</description> 
                <pubDate>Wed, 11 Jan 2023 05:31:00 GMT</pubDate>
                <lastBuildDate>Wed, 11 Jan 2023 05:31:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>OpenSSL generate self signed certificate with SAN in one command (subject alternative name)</title> 
                <link>https://raymii.org/s/tutorials/OpenSSL_generate_self_signed_cert_with_Subject_Alternative_name_oneliner.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/OpenSSL_generate_self_signed_cert_with_Subject_Alternative_name_oneliner.html</guid>
                <description>This small one liner lets you generate an OpenSSL self signed certificate with both a common name and a [Subject Alternative Name (SAN)](https://en.wikipedia.org/wiki/Subject_Alternative_Name). Most guides online require you to specify a separate config file but this guide uses a bash trick [(process substitution)](https://web.archive.org/web/20221014191420/https://superuser.com/questions/1059781/what-exactly-is-in-bash-and-in-zsh) to pass such a config file to OpenSSL via the command line. If you are using OpenSSL 1.1.1 or higher, there now finally is a built in command line option which I'll also cover. </description> 
                <pubDate>Fri, 14 Oct 2022 22:02:00 GMT</pubDate>
                <lastBuildDate>Fri, 14 Oct 2022 22:02:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>OpenSSL test TLSv1.3 connection and ciphersuites with s_client</title> 
                <link>https://raymii.org/s/tutorials/OpenSSL_test_TLSv1.3_connection_with_s_client.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/OpenSSL_test_TLSv1.3_connection_with_s_client.html</guid>
                <description>This guide shows you how to test a server's TLSv1.3 connection and use specific ciphersuites with the command line s_client client from the OpenSSL project. With OpenSSL 1.1.1 you can use TLSv1.3. This guide covers the installation of OpenSSL 1.1.1 on Ubuntu, testing the connection to a server  and specific ciphersuites. It also covers the big differences between TLSv1.3 and lower.</description> 
                <pubDate>Sun, 28 Apr 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 28 Apr 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Strong SSL Security on lighttpd</title> 
                <link>https://raymii.org/s/tutorials/Strong_SSL_Security_On_lighttpd.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Strong_SSL_Security_On_lighttpd.html</guid>
                <description>This tutorial shows you how to set up strong SSL security on the lighttpd webserver. We do this by updating OpenSSL to the latest version to mitigate attacks like Heartbleed, disabling SSL Compression and EXPORT ciphers to mitigate attacks like FREAK, CRIME and LogJAM, disabling SSLv3 and below because of vulnerabilities in the protocol and we will set up a strong ciphersuite that enables Forward Secrecy when possible. We also enable HSTS and HPKP. This way we have a strong and future proof ssl configuration and we get an A+ on the Qually Labs SSL Test.</description> 
                <pubDate>Sun, 14 Jun 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 27 Apr 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Strong SSL Security on nginx</title> 
                <link>https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html</guid>
                <description>This tutorial shows you how to set up strong SSL security on the nginx webserver. We do this by updating OpenSSL to the latest version to mitigate attacks like Heartbleed, disabling SSL Compression and EXPORT ciphers to mitigate attacks like FREAK, CRIME and LogJAM, disabling SSLv3 and below because of vulnerabilities in the protocol and we will set up a strong ciphersuite that enables Forward Secrecy when possible. We also enable HSTS and HPKP. This way we have a strong and future proof ssl configuration and we get an A+ on the Qually Labs SSL Test.</description> 
                <pubDate>Sun, 14 Jun 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 27 Apr 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Strong SSL Security on Apache2</title> 
                <link>https://raymii.org/s/tutorials/Strong_SSL_Security_On_Apache2.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Strong_SSL_Security_On_Apache2.html</guid>
                <description>This tutorial shows you how to set up strong SSL security on the Apache2 webserver. We do this by updating OpenSSL to the latest version to mitigate attacks like Heartbleed, disabling SSL Compression and EXPORT ciphers to mitigate attacks like FREAK, CRIME and LogJAM, disabling SSLv3 and below because of vulnerabilities in the protocol and we will set up a strong ciphersuite that enables Forward Secrecy when possible. We also enable HSTS and HPKP. This way we have a strong and future proof ssl configuration and we get an A+ on the Qually Labs SSL Test.</description> 
                <pubDate>Sun, 14 Jun 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 27 Apr 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>OpenSSL command line Root and Intermediate CA including OCSP, CRL and revocation</title> 
                <link>https://raymii.org/s/tutorials/OpenSSL_command_line_Root_and_Intermediate_CA_including_OCSP_CRL_and_revocation.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/OpenSSL_command_line_Root_and_Intermediate_CA_including_OCSP_CRL_and_revocation.html</guid>
                <description>These are quick and dirty notes on generating a certificate authority (CA), intermediate certificate authorities and end certificates using the OpenSSL command line tools. It includes OCSP, CRL and CA Issuer information and specific issue and expiry dates. We'll set up our own root CA. We'll use the root CA to generate an example intermediate CA. We'll use the intermediate CA to sign end user certificates.</description> 
                <pubDate>Tue, 03 Mar 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 17 Dec 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Encrypt and decrypt files to public keys via the OpenSSL Command Line</title> 
                <link>https://raymii.org/s/tutorials/Encrypt_and_decrypt_files_to_public_keys_via_the_OpenSSL_Command_Line.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Encrypt_and_decrypt_files_to_public_keys_via_the_OpenSSL_Command_Line.html</guid>
                <description>This small tutorial will show you how to use the openssl command line to encrypt and decrypt a file using a public key. We will first generate a random key, encrypt that random key against the public key of the other person and use that random key to encrypt the actual file with using symmetric encryption.</description> 
                <pubDate>Thu, 25 Oct 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 25 Oct 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Chrome 68 is depcrecating HPKP (HTTP Public Key Pinning)</title> 
                <link>https://raymii.org/s/blog/Chrome_68_is_deprecating_HPKP.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Chrome_68_is_deprecating_HPKP.html</guid>
                <description>In 2014 I published an article on HPKP, http public key pinning. It allows a site operator to send a public key in an http header, forcing the browser to only connect when that header is found. It was ment to redice the risk of a compromised certificate authority (since any CA can create a certificate for any website). Quite secure, but it was often wrongly configured, forgotten until certificates expired and there were some security issues like a false pin. Late 2017 Google announced that HPKP would be removed in Chrome 68 and that version is released now, so HPKP is no longer supported. This post goes into the reasoning behind the removal, the possible replacement (Expect-CT) and how to remove HPKP from your site.</description> 
                <pubDate>Tue, 12 Jun 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 12 Jun 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Distributed load testing with Tsung</title> 
                <link>https://raymii.org/s/articles/Basic_Website_load_testing_with_Tsung.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Basic_Website_load_testing_with_Tsung.html</guid>
                <description>At $dayjob I manage a large OpenStack Cloud. Next to that I also build high-performance and redundant clusters for customers. Think multiple datacenters, haproxy, galera or postgres or mysql replication, drbd with nfs or glusterfs and all sorts of software that can (and sometimes cannot) be clustered (redis, rabbitmq etc.). Our customers deploy their application on there and when one or a few components fail, their application stays up. Hypervisors, disks, switches, routers, all can fail without actual service downtime. Next to building such clusters, we also monitor and manage them. When we build such a cluster (fully automated with Ansible) we do a basic load test. We do this not for benchmarking or application flow testing, but to optimize the cluster components. Simple things like the mpm workers or threads in Apache or more advanced topics like MySQL or DRBD. Optimization there depends on the specifications of the servers used and the load patterns. Tsung is a high-performance but simple to configure and use piece of software written in Erlang. Configuration is done in a simple readable XML file. Tsung can be run distributed as well for large setups. It has good reporting and a live web interface for status and reports during a test.</description> 
                <pubDate>Thu, 13 Apr 2017 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 13 Apr 2017 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>HTTP Strict Transport Security for Apache, NGINX and Lighttpd</title> 
                <link>https://raymii.org/s/tutorials/HTTP_Strict_Transport_Security_for_Apache_NGINX_and_Lighttpd.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/HTTP_Strict_Transport_Security_for_Apache_NGINX_and_Lighttpd.html</guid>
                <description>HTTP Strict Transport Security (often abbreviated as HSTS) is a security feature that lets a web site tell browsers that it should only be communicated with using HTTPS, instead of using HTTP. This tutorial will show you how to set up HSTS in Apache2, NGINX and Lighttpd.</description> 
                <pubDate>Fri, 17 Jun 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 17 Jun 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Let's Encrypt with DirectAdmin, now built in!</title> 
                <link>https://raymii.org/s/articles/Lets_Encrypt_Directadmin_Now_Built_In.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Lets_Encrypt_Directadmin_Now_Built_In.html</guid>
                <description>Let's Encrypt is a new certificate authority, recognized by all major browsers. They make it a breeze to set up TLS certificates for your web server. And for free! Let's Encrypt is supported by major players like Mozilla, Akamai, Cisco, the EFF, the Internet Security Research Group and others. Let's Encrypt provides free, automatic and secure certificates so that every website can be secured with an SSL certificate. This article shows you how to setup Let's Encrypt with the DirectAdmin web control panel. DirectAdmin now supports Lets Encrypt natively since 1.50, so no more ssh fiddling, just via the control panel, for all the users on the server.</description> 
                <pubDate>Wed, 24 Feb 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 24 Feb 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Let's Encrypt with DirectAdmin or other Web Control Panels</title> 
                <link>https://raymii.org/s/articles/Lets_Encrypt_Directadmin.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Lets_Encrypt_Directadmin.html</guid>
                <description>Let's Encrypt is a new certificate authority, recognized by all major browsers. They make it a breeze to set up TLS certificates for your web server. And for free! Let's Encrypt is supported by major players like Mozilla, Akamai, Cisco, the EFF, the Internet Security Research Group and others. Let's Encrypt provides free, automatic and secure certificates so that every website can be secured with an SSL certificate. This article shows you how to setup Let's Encrypt with the DirectAdmin web control panel. The guide is generic, so it works for other controlpanels as well. For now it works with the beta, and required some linux knowledge and root access to the hosting server.</description> 
                <pubDate>Sun, 11 Jan 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 24 Feb 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Sign and verify text/files to public keys via the OpenSSL Command Line</title> 
                <link>https://raymii.org/s/tutorials/Sign_and_verify_text_files_to_public_keys_via_the_OpenSSL_Command_Line.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Sign_and_verify_text_files_to_public_keys_via_the_OpenSSL_Command_Line.html</guid>
                <description>This small guide will shows you how to use the OpenSSL Command Line to sign a file, and how to verify the signing of this file. You can do this to prove ownership of a key, or to prove that a file hasn't been modified since you signed it. This works both with small text files as well as huge photo's, documents or PDF files.</description> 
                <pubDate>Mon, 09 Nov 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 09 Nov 2015 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>OpenSSL: Manually verify a certificate against a CRL</title> 
                <link>https://raymii.org/s/articles/OpenSSL_manually_verify_a_certificate_against_a_CRL.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/OpenSSL_manually_verify_a_certificate_against_a_CRL.html</guid>
                <description>This article shows you how to manually verfify a certificate against a CRL. CRL stands for Certificate Revocation List and is one way to validate a certificate status. It is an alternative to the OCSP, Online Certificate Status Protocol.</description> 
                <pubDate>Sun, 22 Mar 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 22 Mar 2015 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>How I got a valid SSL certificate for my ISP's main domain, xs4all.nl</title> 
                <link>https://raymii.org/s/blog/How_I_got_a_valid_SSL_certificate_for_my_ISPs_main_website.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/How_I_got_a_valid_SSL_certificate_for_my_ISPs_main_website.html</guid>
                <description>I got a valid SSL certificate for a domain that is not mine by creating an email alias. In this article I'll explain what happened, why that was possible and how we all can prevent this.</description> 
                <pubDate>Sat, 21 Mar 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 21 Mar 2015 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>HTTP Public Key Pinning Extension HPKP for Apache, NGINX and Lighttpd</title> 
                <link>https://raymii.org/s/articles/HTTP_Public_Key_Pinning_Extension_HPKP.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/HTTP_Public_Key_Pinning_Extension_HPKP.html</guid>
                <description>Public Key Pinning means that a certificate chain must include a whitelisted public key. It ensures only whitelisted Certificate Authorities (CA) can sign certificates for `*.example.com`, and not any CA in your browser store. This article has background theory and configuration examples for Apache, Lighttpd and NGINX.</description> 
                <pubDate>Tue, 30 Dec 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 30 Dec 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>OpenSSL: Manually verify a certificate against an OCSP</title> 
                <link>https://raymii.org/s/articles/OpenSSL_Manually_Verify_a_certificate_against_an_OCSP.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/OpenSSL_Manually_Verify_a_certificate_against_an_OCSP.html</guid>
                <description>This article shows you how to manually verfify a certificate against an OCSP server. OCSP stands for the Online Certificate Status Protocol and is one way to validate a certificate status. It is an alternative to the CRL, certificate revocation list. This article shows you how to manually validate a certificate against an OCSP server.</description> 
                <pubDate>Mon, 07 Apr 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 07 Apr 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>OpenSSL: Get all certificates from a website in plain text</title> 
                <link>https://raymii.org/s/articles/OpenSSL_-_Get_all_certificates_from_a_website_in_plain_text.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/OpenSSL_-_Get_all_certificates_from_a_website_in_plain_text.html</guid>
                <description>This article shows you how to get all certificates of a website in plain text. With a few OpenSSL commands one can get the website certificate plus intermediate certificates, however, if you feed that output to OpenSSL it only works on the first certificate. Using a bit of sed and bash magic we can feed all certificates one by one to OpenSSL.</description> 
                <pubDate>Tue, 04 Feb 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 04 Feb 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>OCSP Stapling on Apache</title> 
                <link>https://raymii.org/s/tutorials/OCSP_Stapling_on_Apache2.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/OCSP_Stapling_on_Apache2.html</guid>
                <description>This tutorial shows you how to set up OCSP stapling on Apache. OCSP stapling is an enhancement to the standard OCSP protocol that delivers OCSP responses from the server with the certificate, eliminating the need for relying parties (web users) to check OCSP responses with the issuing CA. This has the effect of reducing bandwidth, improving perceived site performance, and increasing security for everyone involved in establishing the secure session.</description> 
                <pubDate>Mon, 03 Feb 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 03 Feb 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>OCSP Stapling on nginx</title> 
                <link>https://raymii.org/s/tutorials/OCSP_Stapling_on_nginx.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/OCSP_Stapling_on_nginx.html</guid>
                <description>This tutorial shows you how to set up OCSP stapling on nginx. OCSP stapling is an enhancement to the standard OCSP protocol that delivers OCSP responses from the server with the certificate, eliminating the need for relying parties (web users) to check OCSP responses with the issuing CA. This has the effect of reducing bandwidth, improving perceived site performance, and increasing security for everyone involved in establishing the secure session.</description> 
                <pubDate>Mon, 03 Feb 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 03 Feb 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Stong SSL Security on Lighttpd</title> 
                <link>https://raymii.org/s/tutorials/Pass_the_SSL_Labs_Test_on_Lighttpd_(Mitigate_the_CRIME_and_BEAST_attack_-_Disable_SSLv2_-_Enable_PFS).html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Pass_the_SSL_Labs_Test_on_Lighttpd_(Mitigate_the_CRIME_and_BEAST_attack_-_Disable_SSLv2_-_Enable_PFS).html</guid>
                <description>This tutorial shows you how to set up strong SSL security on the lighttpd webserver. We do this by disabling SSL Compression to mitigate the CRIME attack, disable SSLv3 and below because of vulnerabilities in the protocol and we will set up a strong ciphersuite that enables Forward Secrecy when possible. This way we have a strong and future proof ssl configuration and we get an A on the Qually Labs SSL Test.</description> 
                <pubDate>Wed, 24 Jul 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 24 Jul 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Pass the SSL Labs Test on NGINX (Mitigate the CRIME and BEAST attack, Disable SSLv2 and Enable Perfect Forward Secrecy).</title> 
                <link>https://raymii.org/s/tutorials/Pass_the_SSL_Labs_Test_on_NGINX_(Mitigate_the_CRIME_and_BEAST_attack_-_Disable_SSLv2_-_Enable_PFS).html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Pass_the_SSL_Labs_Test_on_NGINX_(Mitigate_the_CRIME_and_BEAST_attack_-_Disable_SSLv2_-_Enable_PFS).html</guid>
                <description>This tutorial shows you how to get an A on the SSL Labs test using the NGINX webserver. We do this by disabling CBC based ciphers to mitigate the BEAST attack, disabling SSL Compression to mitigate the CRIME attack, disable SSLv2 and below because of vulnerabilities in the protocol and we will enable Perfect Forward Secrecy when possible. This way we have a future proof ssl configuration and we get an A on the Qually Labs SSL Test.</description> 
                <pubDate>Tue, 23 Jul 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 23 Jul 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Pass the SSL Labs Test on Apache2 (Mitigate the CRIME and BEAST attack, Disable SSLv2 and Enable Perfect Forward Secrecy).</title> 
                <link>https://raymii.org/s/tutorials/Pass_the_SSL_Labs_Test_on_Apache2_(Mitigate_the_CRIME_and_BEAST_attack_-_Disable_SSLv2_-_Enable_PFS).html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Pass_the_SSL_Labs_Test_on_Apache2_(Mitigate_the_CRIME_and_BEAST_attack_-_Disable_SSLv2_-_Enable_PFS).html</guid>
                <description>This tutorial shows you how to get an A on the SSL Labs test using the Apache2 webserver. We do this by disabling CBC based ciphers to mitigate the BEAST attack, disabling SSL Compression to mitigate the CRIME attack, disable SSLv2 and below because of vulnerabilities in the protocol and we will enable Perfect Forward Secrecy when possible. This way we have a future proof ssl configuration and we get an A on the Qually Labs SSL Test.</description> 
                <pubDate>Sat, 20 Jul 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 20 Jul 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    