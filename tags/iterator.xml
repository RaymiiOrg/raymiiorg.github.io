<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag iterator on Raymii.org</title> 
            <link>https://raymii.org/s/tags/iterator.xml</link> 
            <description>RSS feed for tag iterator on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/iterator.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Here be dragons, or, invalidated iterators</title> 
                <link>https://raymii.org/s/blog/Here_be_dragons_or_invalidated_iterators.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Here_be_dragons_or_invalidated_iterators.html</guid>
                <description>Recently I had a new 'first-time' moment. You know the ones, the, 'oh right', moments, after you put in a bit of research. Mine was, as you might expect from all the other recent content, related to C++. I learned, the hard way, that 'iterator-based for loops' don't like to be resized during the loop. Well, they don't really care, but some precautions are to be taken since the 'iterator' used in the loop might be invalidated. Or as the very helpfull error during the crash prints to the console, 'munmap_chunk(): invalid pointer' and your debugger points you to somewhere deep in 'new_allocator.h'. In this article I'll give a few examples, both using index based for loops and iterator based for loops, plus some more details on what's going on with iterator invalidation.</description> 
                <pubDate>Sun, 03 May 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 03 May 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    