<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag outlook on Raymii.org</title> 
            <link>https://raymii.org/s/tags/outlook.xml</link> 
            <description>RSS feed for tag outlook on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/outlook.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Using a Windows Mobile 2003 PDA (HP iPAQ h4350) in 2022, including WhatsApp!</title> 
                <link>https://raymii.org/s/blog/Using_a_Windows_Mobile_2003_PDA_hp_ipaq_in_2022_including_whatsapp.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Using_a_Windows_Mobile_2003_PDA_hp_ipaq_in_2022_including_whatsapp.html</guid>
                <description>While cleaning out my collection of electronics, I found a PDA. Not the modern kind (voice assistant), but the old school precursor to the smartphone. It's a HP iPAQ h4350, it was a model used by the Dutch Railways. I picked it up in working condition years ago and was wondering, how does a mobile device from 2003 stack up to a modern smartphone? The first thing I did was run linux on it which worked surprisingly well, it however was noticeably slower than Windows Mobile. This post shows you how well the device still works in 2022, including using WhatsApp to chat. Almost all things I use my smartphone for, I can do with this PDA!</description> 
                <pubDate>Sun, 29 May 2022 01:30:00 GMT</pubDate>
                <lastBuildDate>Sun, 29 May 2022 01:30:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Send email with multiple inline images via bash with a loop</title> 
                <link>https://raymii.org/s/snippets/Send_email_with_multiple_inline_images_via_bash.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Send_email_with_multiple_inline_images_via_bash.html</guid>
                <description>Recently I had a request from a user that whished to receive a scheduled email with two screenshots. The screenshots were automated via AutoIt on a network share, the user manually logged in every evening to check the pictures. With bash and postfix/sendmail we can automate this process, the user now doesn't have to login but can just check their email. There are a lot of snippets and guides to attach emails via the shell, but displaying multiple images inline as an HTML mail was something I had to figure out. You cannot embed the image in base64 HTML because Outlook doesn't show that, you must use the Content-ID style embed. Like UUENCODE, but more complicated. (The next step in this process with the user is to automate the reason why they have to check those screenshots every night, that is something for another article)</description> 
                <pubDate>Mon, 23 Jul 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 23 Jul 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Microsoft Exchange / Active Directory Powershell script to notify users of expiring Passwords</title> 
                <link>https://raymii.org/s/software/Microsoft_Exchange_Powershell_Script_User_Password_Expiry.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/Microsoft_Exchange_Powershell_Script_User_Password_Expiry.html</guid>
                <description>This is a small PowerShell script which emails your users that their password is going to expire in X days. This is needed when you have an Active Directory and Exchange Environment, but your users do not log in to a Windows machine bound to the Active Directory, but for example a Mac OS X or Linux machine with Full Disk Encryption enabled. Then they are not notified that their password is about to expire. This script can run as a scheduled task and scan and email your users that their password is about to expire.</description> 
                <pubDate>Thu, 08 Aug 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 08 Aug 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Exchange 2007 and 2010 Autodiscovery DNS SRV record for BIND</title> 
                <link>https://raymii.org/s/tutorials/Exchange_2007_2010_Autodiscovery_DNS_SRV_record_for_BIND.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Exchange_2007_2010_Autodiscovery_DNS_SRV_record_for_BIND.html</guid>
                <description>This is a BIND configuration example to set up Exchange Autodiscovery. Autodiscovery is the ability for Outlook to automatically configure itself to an Exchange 2007/2010 server. The main benefit is for remote users to use Outlook on the Internet as if it was connected on the LAN, this is called Outlook Anywhere or Outlook RPC over HTTP. This is very easily accomplished by having a specific DNS record available for the domain. However, the only examples Microsoft gives you are for their own software. This is the BIND version of the record.</description> 
                <pubDate>Thu, 09 May 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 09 May 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Exchange 2010 - OWA - Lock user after x amount of failed logins</title> 
                <link>https://raymii.org/s/tutorials/Exchange_2010_OWA_lock_users_after_x_amount_of_failed_logins.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Exchange_2010_OWA_lock_users_after_x_amount_of_failed_logins.html</guid>
                <description>This is a tutorial to set up automatic user lockout in Exchange 2010 - Outlook Web Acces (OWA). When a user does 5 wrong login attempts, he/she is locked out from the webinterface. After for example 5 minutes he or she is unlocked again automatically. This helps you mitigate brute force attacks, since an attacker can only try 1 password/minute, but the user will not be blocked for to long. Exchange 2010 has some special register settings to make IIS stop caching, otherwise it would not work. As a bonus you get an LDAP saved search query to view locked out users</description> 
                <pubDate>Wed, 19 Dec 2012 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 19 Dec 2012 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    