<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag backups on Raymii.org</title> 
            <link>https://raymii.org/s/tags/backups.xml</link> 
            <description>RSS feed for tag backups on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/backups.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Local incremental backups of Google Photos on Ubuntu with gphotos-sync</title> 
                <link>https://raymii.org/s/tutorials/Local_incremental_Google_Photos_backup_on_Ubuntu.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Local_incremental_Google_Photos_backup_on_Ubuntu.html</guid>
                <description>'Google Photos' no longer syncs with 'Google Drive' or with their 'Backup and Sync' desktop software. There used to be a checkbox to get your 'Google Photos' pictures in 'Google Drive' but that has been disabled. I used that feature together with their 'Backup and Sync' tool to sync all the photos in 'Google Photos' to my local Windows computer. From there I use 'DigiKam'  to manage the photos and backup them offline and offsite. Due to Google removing that feature, I had to go find another way to get the pictures out of 'Google Photos', which, after a few months of (automated) use, 'gphotos-sync' on Ubuntu seems to be the best, stable choice. In this guide I'll show you how to setup incremental backups from 'Google Photos' on Ubuntu. My 'DigiKam' database moved over without problems, and now I'm glad I don't have to use Windows for picture managemant anymore.</description> 
                <pubDate>Mon, 24 Aug 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 24 Aug 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Introducing the Yubikey Nano XL Rugged edition</title> 
                <link>https://raymii.org/s/blog/Introducing_the_Yubikey_Nano_XL_Rugged_Edition.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Introducing_the_Yubikey_Nano_XL_Rugged_Edition.html</guid>
                <description>Last month my Yubikey broke. I had a second one as a backup so there were no problems for me. This second yubikey is a Nano model, that means it is about 1 cm by 1 cm, the normal yubikey is 2 cm by 5. It fits inside the USB port and is meant to be inserted in the computer all the time. Extracting it from the port is hard as well, since it is so small. I use my yubikey on different machines and don't like the idea of it being in a computer when I'm not there, so I wanted to fix this. I did not fix it by buying a regular sized yubikey, but I found a clever workaround, which I name the Yubikey nano XL Rugged. You'll understand when you see the pictures.</description> 
                <pubDate>Fri, 27 Apr 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 27 Apr 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>My Yubikey broke, but I had a backup. So should you with your 2FA</title> 
                <link>https://raymii.org/s/blog/My_Yubikey_Broke_-_Important_tip_for_two_factor_BACKUP.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/My_Yubikey_Broke_-_Important_tip_for_two_factor_BACKUP.html</guid>
                <description>Today my trusty old first generation Yubikey didn't light up when I plugged it in. No problem for me, I had a backup key. But most people don't, so here's an important tip when you use two factor authentication like a Yubikey, Nitrokey or Google Authenticator (HOTP). TL;DR: Have a second hardware token stored away safely and backup your QR codes (print/screenshot) somewhere secure. Swap the hardware tokens often to make sure they both work with all services. Just as with regular data, make backups and test restores.</description> 
                <pubDate>Sun, 18 Mar 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 18 Mar 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Encrypted Duplicity Backups to Openstack Swift Objectstore</title> 
                <link>https://raymii.org/s/tutorials/Encrypted_Duplicity_Backups_to_Openstack_Swift_Objectstore.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Encrypted_Duplicity_Backups_to_Openstack_Swift_Objectstore.html</guid>
                <description>This is a guide on backing up your data to an Openstack Swift (Objectstore) instance using Duplicity. It provides encrypted backups using gpg so that you can safely use any public cloud storage to store them. This tutorial is for Ubuntu and CentOS and includes initial setup plus a script to automate it all. We will be using the Dutch provider CloudVPS, which is a non american company, so your data is more safe than it is with a provider that is vulnerable to the patriot act. Although your data is already encrypted with GPG, you can never be to sure. CloudVPS provides 10GB free ObjectStore, if you have VPS with them, the data is stored on at least 3 machines in 3 locations and they have a boatload of certifications.</description> 
                <pubDate>Mon, 19 May 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 19 May 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    