<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag embedded on Raymii.org</title> 
            <link>https://raymii.org/s/tags/embedded.xml</link> 
            <description>RSS feed for tag embedded on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/embedded.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Yocto boot2qt for the Seeed reTerminal (Qt 6)</title> 
                <link>https://raymii.org/s/tutorials/Yocto_boot2qt_for_the_Seeed_reTerminal_qt6.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Yocto_boot2qt_for_the_Seeed_reTerminal_qt6.html</guid>
                <description>In this guide we'll build a linux distribution for Seeed reTerminal, using the Yocto project and the `boot2qt` stack provided by Qt. This `boot2qt` image can be written to the internal eMMC and when booted up, the Seeed reTerminal runs a software stack that integrates nicely with Qt Creator (the Qt IDE), for example, one click deployment to the device. You can run your own Qt application on the reTerminal, full screen, it will boot right into it.
This guide covers Qt 6.2. The guide also covers changing the default startup app to your own app, Qt Creator integration and rotating your Qt app, both Widgets and QML, the latter via Wayland and Weston.</description> 
                <pubDate>Fri, 18 Mar 2022 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 04 Apr 2022 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Build a WeatherTerminal app for the Seeed reTerminal (with Qt 6 &amp; QML)</title> 
                <link>https://raymii.org/s/tutorials/Qt_QML_WeatherTerminal_app_for_the_Seeed_reTerminal.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Qt_QML_WeatherTerminal_app_for_the_Seeed_reTerminal.html</guid>
                <description>In this guide I'll show you how to build a weather app for the Seeed reTerminal using Qt and QML. Imagine the reTerminal in your entrance hallway and with just a quick glance at the screen you'll know what the weather will be the next few hours, if you need an umbrella, if you'll have a headwind on your bicycle ride or if it's just going to be clear and sunny. This tutorial builds on the [reTerminal Yocto boot2qt distro](/s/tutorials/Yocto_boot2qt_for_the_Seeed_reTerminal_qt6.html) we've built in the previous article and uses Qt 6. Qt is a C++ framework, but this Weather app will use QML almost exclusively. I'm using just QML to make the guide more accessible and also because I'm used to doing everything in C++, so a sidestep to QML is fun for me as well. </description> 
                <pubDate>Sat, 02 Apr 2022 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 02 Apr 2022 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Raspberry Pi Compute Module 4 eMMC flashing issue (nRPI_BOOT)</title> 
                <link>https://raymii.org/s/blog/Raspberry_Pi_Compute_Module_4_eMMC_flashing_issues.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Raspberry_Pi_Compute_Module_4_eMMC_flashing_issues.html</guid>
                <description>I recently got my hands on a Raspberry Pi 4 Compute Module, 4 GB with 32 GB eMMC flash and a Compute Module 4 IO board. Due to the global chip shortage it's hard to find one in stock but I got lucky by checking [rpilocator.com] (https://rpilocator.com/) regularly (thanks to [Jeff Geerling] (https://www.jeffgeerling.com/blog/2022/its-dire-raspberry-pi-availability-tracker-launched) for that site. He's got amazing Raspberry Pi related content next to a bunch of high-quality Ansible playbooks, go give him a visit).
The eMMC edition I have can only be flashed if you put a jumper on a pin on the I/O board (to put the cm4 in a special mode, `nRPI_BOOT`) and use a special tool, [usbboot](https://github.com/raspberrypi/usbboot). [Jeff has a great guide](https://web.archive.org/web/20220226203155/https://www.jeffgeerling.com/blog/2020/how-flash-raspberry-pi-os-compute-module-4-emmc-usbboot) on flashing the cm4 eMMC edition. My `cm4` however, was not showing up whenever I put it in this special flashing mode. This article goes over the troubleshooting I did and the eventual solution (hint: hardware problem).</description> 
                <pubDate>Sat, 26 Feb 2022 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 26 Feb 2022 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Execute a script in a Yocto package on every image build</title> 
                <link>https://raymii.org/s/snippets/Execute_a_script_in_a_Yocto_package_on_every_image_build.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Execute_a_script_in_a_Yocto_package_on_every_image_build.html</guid>
                <description>This is a small snippet showing a Yocto recipe that executes a script on every build of an image that includes that recipe. I use it to write the build hosts date/time to a file on the image, but you could do anything you want inside the script.
It's not recommended to do this, for example, if you want to place a binary on your image you should version it correctly. Yocto can build from a git repo, no need to copy binaries. If you include the `buildinfo` class your image or the `os-release` recipe, build info is also written to your image. </description> 
                <pubDate>Tue, 22 Feb 2022 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 22 Feb 2022 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Yocto boot2qt for the Raspberry Pi 4, both Qt 5.15 and 6.2</title> 
                <link>https://raymii.org/s/tutorials/Yocto_boot2qt_for_the_Raspberry_Pi_4_both_Qt_6_and_Qt_5.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Yocto_boot2qt_for_the_Raspberry_Pi_4_both_Qt_6_and_Qt_5.html</guid>
                <description>In this guide we'll build a linux distribution for Raspberry Pi 4, using the Yocto project and the `boot2qt` stack provided by Qt. This `boot2qt` image can be written to an SD card and when booted up, the Raspberry Pi runs a software stack that integrates nicely with Qt Creator (the Qt IDE), for example, one click deployment to the device. You can run your own Qt application on the Pi, full screen, it will boot right into it.
This guide covers both Qt 5.15 and Qt 6.2. The 5.15 build process is a bit convoluted due to a few upstream issues. The guide also covers changing the default startup app to your own app and Qt Creator integration.</description> 
                <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 21 Feb 2022 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Get serial port data on the web with live updating</title> 
                <link>https://raymii.org/s/blog/Get_serial_port_data_on_the_web_with_live_updating.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Get_serial_port_data_on_the_web_with_live_updating.html</guid>
                <description>Recently I was asked to build a test setup to measure the accuracy of a few loadcells (weight sensors) in a frame. Someone other than me would execute the test and required access to the measured data, preferably live and without needing knowledge of ssh or linux. The weight sensors can be read with an openscale board from sparkfun via a serial connection which the board emulates over USB (via an FTDI chip), via that same serial connection you can also calibrate them or change settings like amount of decimals. As a quick solution I created a webpage that uses a small amount of javascript to live update the readings from the board. screen is used to capture the output of the serial connection to a file which the webpage displays and updates. In this article I'll talk about how I put various bits of software together to get the output of the serial connection onto a nice webpage with live updating.</description> 
                <pubDate>Sat, 28 Sep 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 28 Sep 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>connman operstate list</title> 
                <link>https://raymii.org/s/snippets/connman_operstate_list.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/connman_operstate_list.html</guid>
                <description>Recently I was debugging connection issues with a system that uses connman as it's network management software. In the log it was visible that the connection went away and came back, logged with 'operstate' $number $state. I couldn't easily find an overview of all the possible states, but since it's open source we can take a look at the code to find out. Publishing it here for future reference.</description> 
                <pubDate>Tue, 25 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 25 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Building opkg .ipk packages by hand (for OpenEmbedded/Yocto/OpenWRT)</title> 
                <link>https://raymii.org/s/tutorials/Building_IPK_packages_by_hand.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Building_IPK_packages_by_hand.html</guid>
                <description>.ipk packages are used by a variety of embedded linux systems, like routers running OpenWRT and appliances running on OpenEmbedded (Yocto). The opkg command installs these packages and OpenEmbedded comes with a set of tools to build .ipk packages. Recently I had to create ipk packages in a scripted fashion for a few hundred systems, all unique per system. The .ipk packages includes a few software changes for debugging, a systemd service and one precompiled binary. The yocto build tools were not available on the machine where these packages would be made so I had to figure out how to make them by hand, which means, automatically. The packages are actually just compressed files containing a few control files and the data to be extracted on the filesystem. This article will walk you through the steps of creating these packages by hand.</description> 
                <pubDate>Fri, 05 Apr 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 05 Apr 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    