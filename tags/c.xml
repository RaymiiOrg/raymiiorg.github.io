<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag c on Raymii.org</title> 
            <link>https://raymii.org/s/tags/c.xml</link> 
            <description>RSS feed for tag c on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/c.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Rectangle{} debugging in QML, just like printf(), but for QT</title> 
                <link>https://raymii.org/s/articles/Rectangle_debugging_in_QML_just_like_printf.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Rectangle_debugging_in_QML_just_like_printf.html</guid>
                <description>Recently I've been using a debugging technique in QT/QML that I've decided to name `Rectangle{}` debugging, in the same vein as `printf()` debugging. QML is a markup language (part of the QT framework) like HTML/CSS, with inline Javascript that can interact with the C++ code of your (QT) application. QML has the concept of `anchors` for relative positioning of elements. Overall, `anchors` work quite well, but can get complex when inheretance and complicated layouts come into play. The `Rectangle{}` style of debugging places a semi-transparent rectangle with a border around your element so you can visualize the positioning and see what effect your changes have. This article shows an example where I recently applied this style of debugging at work in our coffee machine user interface, including some tips to do actual `printf()` style debugging (but with `Console.log`).</description> 
                <pubDate>Wed, 08 Sep 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 08 Sep 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Only zero is false, everything else is true in C++</title> 
                <link>https://raymii.org/s/snippets/Cpp_Only_zero_is_false.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Cpp_Only_zero_is_false.html</guid>
                <description>When using numbers in a boolean (implicit conversion), remember that only zero evaluates to false. Anything else, including negative numbers, will evaluate to true. This snippet talks about the rules for implicit conversion in C++ when using booleans. For seasoned programmers it's nothing new, but I found it interesting.</description> 
                <pubDate>Fri, 12 Jul 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 12 Jul 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    