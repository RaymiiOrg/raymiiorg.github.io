<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag logging on Raymii.org</title> 
            <link>https://raymii.org/s/tags/logging.xml</link> 
            <description>RSS feed for tag logging on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/logging.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Disable (debug) logging in QT and QML</title> 
                <link>https://raymii.org/s/articles/Disable_logging_in_QT_and_QML.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Disable_logging_in_QT_and_QML.html</guid>
                <description>In QT you can use a few functions from the `qDebug.h` header like `qDebug()` and `qWarning()` to log information to the console. In QML you can use the likes of `console.log()`, `console.error()`. It's also very easy to implement your own logger (eg. `SyslogMessageHandler`) if you want something different, like logging to syslog and the console.
In this post I'll show you how to disable both forms of logging in a release build, qml and qt have different ways to manage their output.</description> 
                <pubDate>Sat, 27 Feb 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 27 Feb 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Get serial port data on the web with live updating</title> 
                <link>https://raymii.org/s/blog/Get_serial_port_data_on_the_web_with_live_updating.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Get_serial_port_data_on_the_web_with_live_updating.html</guid>
                <description>Recently I was asked to build a test setup to measure the accuracy of a few loadcells (weight sensors) in a frame. Someone other than me would execute the test and required access to the measured data, preferably live and without needing knowledge of ssh or linux. The weight sensors can be read with an openscale board from sparkfun via a serial connection which the board emulates over USB (via an FTDI chip), via that same serial connection you can also calibrate them or change settings like amount of decimals. As a quick solution I created a webpage that uses a small amount of javascript to live update the readings from the board. screen is used to capture the output of the serial connection to a file which the webpage displays and updates. In this article I'll talk about how I put various bits of software together to get the output of the serial connection onto a nice webpage with live updating.</description> 
                <pubDate>Sat, 28 Sep 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 28 Sep 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>GNUplot tips for nice looking charts from a CSV file</title> 
                <link>https://raymii.org/s/tutorials/GNUplot_tips_for_nice_looking_charts_from_a_CSV_file.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/GNUplot_tips_for_nice_looking_charts_from_a_CSV_file.html</guid>
                <description>Recently I had to do some testing which resulted in a lot of log data. Looking at a bunch of text is not the same as seeing things graphically, this particular logdata was perfect to put in a graph. My goto favorite tool for graphs and charts is gnuplot. Not only is it very extensible, it is also reproducable. Give me a configfile and command over 'do this, then this and then such and such' in Excel to get a consistent result. In this article I'll give tips for using gnuplot, which include parsing a CSV file, a second axis, environment variables, A4 PDF's and a ton of styling options for a nice looking chart.</description> 
                <pubDate>Sat, 06 Jul 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 06 Jul 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Line total (up+down sum) in PHP Network Weathermap</title> 
                <link>https://raymii.org/s/tutorials/Line_total_up_down_sum_in_php_weathermap.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Line_total_up_down_sum_in_php_weathermap.html</guid>
                <description>With PHP Network Weathermap you can create a birds-eye view of network components from your monitoring system (like LibreNMS, Cacti or anything else with an RRD database). It can display simple maps with components and links between, showing up and down traffic, but also complex systems with custom components, like Nagios status, temperature or other information. For network and system administrators seeing the seperate in and out traffic of a link is fine, we can sum up two numbers. A co worker filling the role of service manager asked me if it was possible to sum up in and out and show that, including the scale (different colours depending on link usage). This co worker is not interested in the seperate up/down link speed but wants to know how much traffic a location is using in total. Using a clever workaround, you can display a line's total usage, including the scale. This article also gives some more tips on weathermap, colouring and scale.</description> 
                <pubDate>Tue, 13 Nov 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 13 Nov 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Service checks in LibreNMS (http, all other Nagios plugins)</title> 
                <link>https://raymii.org/s/tutorials/Service_checks_in_LibreNMS_nagios_plugins.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Service_checks_in_LibreNMS_nagios_plugins.html</guid>
                <description>LibreNMS is becoming one of my favorite monitoring tools. Setup and getting started is easy and it has enough advanced options and tunables. I recently discovered that LibreNMS is able to check services as well. Services, in this context, means, executing Nagios plugins (like check_http, check_ping, etc). This allows you to check services that SNMP does not cover by default, like HTTP(s) health checks, certificate expiry, tcp port checks (e.g. rdp) and anything for which you can write a Nagios plugin yourself. The performance data, if available, is graphed automatically. Alerting is done with the regular LibreNMS alerts. This guide covers the setup of services (it's not enabled by default) and a few basic checks, like an http health check, certificate expiry and SSH monitoring.</description> 
                <pubDate>Mon, 10 Sep 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 10 Sep 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Python script to talk to LibreNMS API and get alerts and hosts</title> 
                <link>https://raymii.org/s/software/Python_script_to_talk_to_LibreNMS_API_and_get_alerts_and_hosts.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/Python_script_to_talk_to_LibreNMS_API_and_get_alerts_and_hosts.html</guid>
                <description>This script talks to the LibreNMS API to receive a list of down devices and alerts. The LibreNMS dashboard provides widgets for alerts and host statusses, but there is no easy way to access that output via the API. Using Python I was able to get certain information and output it as HTML or text using PrettyTable. It can be included in other systems or be used in a chain of monitoring customizations. z</description> 
                <pubDate>Wed, 08 Aug 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 08 Aug 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Syslog configuration for remote logservers for syslog-ng and rsyslog, both client and server</title> 
                <link>https://raymii.org/s/tutorials/Syslog_config_for_remote_logservers_for_syslog-ng_and_rsyslog_client_server.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Syslog_config_for_remote_logservers_for_syslog-ng_and_rsyslog_client_server.html</guid>
                <description> Syslog is the protocol, format (and software) linux and most networking devices use to log messages. All kinds of messages, system, authentication, login and applications. There are multiple implementations of syslog, like syslog-ng and rsyslog. Syslog has the option to log to a remote server and to act as a remote logserver (that receives logs). With a remote logging server you can archive your logs and keep them secure (when a machine gets hacked, if root is compromised the logs on the machine are no longer trustworthy). This tutorial shows how to set up a syslog server with rsyslog and syslog-ng and shows how to setup servers as a syslog client (that log to a remote server) with syslog-ng and rsyslog.</description> 
                <pubDate>Thu, 21 Jun 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 21 Jun 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Apache access/error log to syslog</title> 
                <link>https://raymii.org/s/snippets/Apache_access_and_error_log_to_syslog.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Apache_access_and_error_log_to_syslog.html</guid>
                <description>This snippet shows you how to redirect the Apache access log to syslog using the Customlog statement, and the Error log to syslog via the ErrorLog statement.</description> 
                <pubDate>Sun, 15 Dec 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 15 Dec 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Bash Bits: Debug Logging</title> 
                <link>https://raymii.org/s/snippets/Bash_Bits_Debug_Logging.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Bash_Bits_Debug_Logging.html</guid>
                <description>Bash Bits are small examples and tips for Bash Scripts. This bash bit shows you how to add debug logging to a bash script.</description> 
                <pubDate>Sun, 15 Sep 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 15 Sep 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Munin plugin to show Logstash/Kibana messages per hour</title> 
                <link>https://raymii.org/s/software/Munin_plugin_Logstash_Kibana_messages_per_hour.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/Munin_plugin_Logstash_Kibana_messages_per_hour.html</guid>
                <description>This is a simple munin plugin which shows you the amount of log messages your logstash/kibana server receives per hour.</description> 
                <pubDate>Fri, 12 Apr 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 12 Apr 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Postfix: log message from, to and subject</title> 
                <link>https://raymii.org/s/tutorials/Postfix_Log_message_from_to_and_subject_headers.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Postfix_Log_message_from_to_and_subject_headers.html</guid>
                <description>This tutorial shows you how to set up postfix to log email subject and other headers.</description> 
                <pubDate>Sat, 28 Mar 2009 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 28 Mar 2009 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    