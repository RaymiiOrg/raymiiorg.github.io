<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag observium on Raymii.org</title> 
            <link>https://raymii.org/s/tags/observium.xml</link> 
            <description>RSS feed for tag observium on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/observium.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Line total (up+down sum) in PHP Network Weathermap</title> 
                <link>https://raymii.org/s/tutorials/Line_total_up_down_sum_in_php_weathermap.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Line_total_up_down_sum_in_php_weathermap.html</guid>
                <description>With PHP Network Weathermap you can create a birds-eye view of network components from your monitoring system (like LibreNMS, Cacti or anything else with an RRD database). It can display simple maps with components and links between, showing up and down traffic, but also complex systems with custom components, like Nagios status, temperature or other information. For network and system administrators seeing the seperate in and out traffic of a link is fine, we can sum up two numbers. A co worker filling the role of service manager asked me if it was possible to sum up in and out and show that, including the scale (different colours depending on link usage). This co worker is not interested in the seperate up/down link speed but wants to know how much traffic a location is using in total. Using a clever workaround, you can display a line's total usage, including the scale. This article also gives some more tips on weathermap, colouring and scale.</description> 
                <pubDate>Tue, 13 Nov 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 13 Nov 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Service checks in LibreNMS (http, all other Nagios plugins)</title> 
                <link>https://raymii.org/s/tutorials/Service_checks_in_LibreNMS_nagios_plugins.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Service_checks_in_LibreNMS_nagios_plugins.html</guid>
                <description>LibreNMS is becoming one of my favorite monitoring tools. Setup and getting started is easy and it has enough advanced options and tunables. I recently discovered that LibreNMS is able to check services as well. Services, in this context, means, executing Nagios plugins (like check_http, check_ping, etc). This allows you to check services that SNMP does not cover by default, like HTTP(s) health checks, certificate expiry, tcp port checks (e.g. rdp) and anything for which you can write a Nagios plugin yourself. The performance data, if available, is graphed automatically. Alerting is done with the regular LibreNMS alerts. This guide covers the setup of services (it's not enabled by default) and a few basic checks, like an http health check, certificate expiry and SSH monitoring.</description> 
                <pubDate>Mon, 10 Sep 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 10 Sep 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Python script to talk to LibreNMS API and get alerts and hosts</title> 
                <link>https://raymii.org/s/software/Python_script_to_talk_to_LibreNMS_API_and_get_alerts_and_hosts.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/Python_script_to_talk_to_LibreNMS_API_and_get_alerts_and_hosts.html</guid>
                <description>This script talks to the LibreNMS API to receive a list of down devices and alerts. The LibreNMS dashboard provides widgets for alerts and host statusses, but there is no easy way to access that output via the API. Using Python I was able to get certain information and output it as HTML or text using PrettyTable. It can be included in other systems or be used in a chain of monitoring customizations. z</description> 
                <pubDate>Wed, 08 Aug 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 08 Aug 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    