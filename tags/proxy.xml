<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag proxy on Raymii.org</title> 
            <link>https://raymii.org/s/tags/proxy.xml</link> 
            <description>RSS feed for tag proxy on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/proxy.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>nginx 1.15.2, ssl_preread_protocol, multiplex HTTPS and SSH on the same port</title> 
                <link>https://raymii.org/s/tutorials/nginx_1.15.2_ssl_preread_protocol_multiplex_https_and_ssh_on_the_same_port.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/nginx_1.15.2_ssl_preread_protocol_multiplex_https_and_ssh_on_the_same_port.html</guid>
                <description>The NGINX blog recently had a nice article on a new feature of NGINX 1.15.2, $ssl_preread_protocol. This allows you to multiplex HTTPS and other SSL protocols on the same port, or as their blog states, 'to distinguish between SSL/TLS and other protocols when forwarding traffic using a TCP (stream) proxy'. This can be used to run SSH and HTTPS on the same port (or any other SSL protocol next to HTTPS). By running SSH and HTTPS on the same port, one can circumvent certain firewall restrictions. If the session looks like HTTPS, nginx will handle it, if it looks like something else, it will forward it to the configured other program. I used to use SSHL to get this functionality, but now it's built into the nginx webserver. This small guide will cover the installation of the latest version of nginx on Ubuntu (16.04) and configuring this multiplex feature.</description> 
                <pubDate>Mon, 06 Aug 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 12 Jan 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Use Ubuntu behind a Microsoft ForeFront TMG proxy with cntlm</title> 
                <link>https://raymii.org/s/tutorials/Use_Ubuntu_behind_a_Microsoft_ForeFront_TMG_proxy_with_cntlm.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Use_Ubuntu_behind_a_Microsoft_ForeFront_TMG_proxy_with_cntlm.html</guid>
                <description>Recently I had to deploy a few machines in a network where outgoing network access was forced through a Microsoft Forefront TMG proxy. For all the Windows clients this went automatically due to domain policies, for Linux this has to be set up manually. Defining the proxy in /etc/environment was not enough since NTML authentication is required, which is not supported by default. I found cntlm, a piece of software which acts as a local proxy, translating all requests to authenticated NTLM requests to your upstream proxy. This guide covers the (offline) installation, setup, getting the correct password hash and system-wide configuration. It should work on a desktop as well, but I did not test that.</description> 
                <pubDate>Sat, 27 Oct 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 27 Oct 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>NGINX: Proxy folders to different root</title> 
                <link>https://raymii.org/s/tutorials/NGINX_proxy_folder_to_different_root.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/NGINX_proxy_folder_to_different_root.html</guid>
                <description>This tutorial shows you how to have NGINX use different folders as different upstream proxy's, without the proxy also having the folder. For example, if you proxy www.example.com/wiki to server wiki.example.com, by default it will go to wiki.example.com/wiki. This tutorial has a rewrite rule to fix that.</description> 
                <pubDate>Thu, 04 Apr 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 04 Apr 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    