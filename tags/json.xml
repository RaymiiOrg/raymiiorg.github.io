<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag json on Raymii.org</title> 
            <link>https://raymii.org/s/tags/json.xml</link> 
            <description>RSS feed for tag json on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/json.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Hacker News vs Lobste.rs in C++, an exercise in parsing json http api's and date/time/timezones</title> 
                <link>https://raymii.org/s/software/Cpp_exercise_in_parsing_json_http_apis_and_time_stuff.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/Cpp_exercise_in_parsing_json_http_apis_and_time_stuff.html</guid>
                <description>I recently wondered how many top posts on the Hacker News frontpage are also on Lobsters. At first I reached for my trusty Python, because when I need to do some JSON API parsing that's what I'll use. (Otherwise bash is my default goto for small things, except when json, networking or associative arrays are involved.) But, then, a thought came to my mind. Why not try it with reasonably modern C++. It's what I do at work, so why not a simple personal project. It would involve dependency management (json and a http library), parsing both API endpoints and, most importantly, doing stuff with time. Time, timezones and dates are hard. This article contains a bit of my learning process, compilation and usage instructions and an example run. Go look at the code and run the code yourself. Let me know if my timezone calculations are working outside of GMT+1.</description> 
                <pubDate>Thu, 31 Dec 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 31 Dec 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Get all SSH public keys from gitlab</title> 
                <link>https://raymii.org/s/snippets/Get_all_SSH_public_keys_from_gitlab.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Get_all_SSH_public_keys_from_gitlab.html</guid>
                <description>This small snippet gets all the SSH keys from a gitlab instance. You need to be an administrator, then you can query all keys at once using the API. On the web frontend you can only see the keys per user, not all at once in an overview.</description> 
                <pubDate>Wed, 26 Aug 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 26 Aug 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Get a JSON value with bash and sed</title> 
                <link>https://raymii.org/s/snippets/Get_json_value_with_sed.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Get_json_value_with_sed.html</guid>
                <description>Recently I was asked to get one value from a json object using only shell tools. The json in question is from a dutch radio station and it lists the current song that is played. Using this together with a few shell commands and notify-send we can show the current song when it changes as a desktop notification. I'd rather use Python or jq if it has to be shell. In this case the co-worker asked to just use simple shell tools and no external dependencies.</description> 
                <pubDate>Tue, 26 Feb 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 26 Feb 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Codename Geld</title> 
                <link>https://raymii.org/s/software/Codename_Geld.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/Codename_Geld.html</guid>
                <description>Codename Geld is a finance manager written in PHP. It uses a JSON text file for the values and the visual side is created with the excellent HTML5 Kickstart framework by Joshua Gatcke. It is not as fancy as mint.com or gnucash, so if you need advanced features (multiple accounts for example) you might want to use another piece of software. Also, the code is quite messy.</description> 
                <pubDate>Mon, 15 Oct 2012 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 15 Oct 2012 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>NutsManager</title> 
                <link>https://raymii.org/s/software/NutsManager.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/NutsManager.html</guid>
                <description>NutsManager is a power/gas/water usage tracker written in PHP. It uses a JSON text file for the values and the visual side is created with the excellent HTML5 Kickstart framework by Joshua Gatcke. The graphs are made with the flot framework. It helps me to keep track of my power usage, and shows me on which days I use a lot, and on which days I do not. That way, I know that a LAN party costs me a lot. Also, the code is quite messy.</description> 
                <pubDate>Sat, 15 Sep 2012 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 15 Sep 2012 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>PHP Task/Todo list</title> 
                <link>https://raymii.org/s/software/PHP-task-list-v2.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/PHP-task-list-v2.html</guid>
                <description>This is a task/todo list written in PHP. It uses a JSON text file for the tasks, and the visual side is created with the HTML5 Kickstart framework by Joshua Gatcke.</description> 
                <pubDate>Wed, 12 Sep 2012 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 12 Sep 2012 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    