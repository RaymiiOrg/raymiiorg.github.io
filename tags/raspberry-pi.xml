<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag raspberry-pi on Raymii.org</title> 
            <link>https://raymii.org/s/tags/raspberry-pi.xml</link> 
            <description>RSS feed for tag raspberry-pi on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/raspberry-pi.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Kubernetes (k3s) Ingress for different domains (virtual hosts)</title> 
                <link>https://raymii.org/s/tutorials/Kubernetes_k3s_Ingress_for_different_domains_like_virtual_hosts.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Kubernetes_k3s_Ingress_for_different_domains_like_virtual_hosts.html</guid>
                <description>Now that I have a [high-available local kubernetes cluster](/s/tutorials/High_Available_k3s_kubernetes_cluster_with_keepalived_galera_and_longhorn.html) it's time to learn not just managing the cluster but actually deploying some services on there. Most examples online use a `NodePort` or a `LoadBalancer` to expose a service on a port, but I want to have domains, like, `grafana.homelab.mydomain.org` instead of `192.0.2.50:3000`. Back in the old days this was called [Virtual Host](https://web.archive.org/web/20240515131604/https://httpd.apache.org/docs/2.4/vhosts/), using 1 IP for multiple domains. My k3s cluster uses `traefik` for its incoming traffic and by defining an `Ingress` we can route a domain to a service (like a `ClusterIP`). This page will show you how. </description> 
                <pubDate>Wed, 10 Jul 2024 20:39:00 GMT</pubDate>
                <lastBuildDate>Wed, 10 Jul 2024 20:39:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>High Available k3s kubernetes cluster with keepalived, galera and longhorn</title> 
                <link>https://raymii.org/s/tutorials/High_Available_k3s_kubernetes_cluster_with_keepalived_galera_and_longhorn.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/High_Available_k3s_kubernetes_cluster_with_keepalived_galera_and_longhorn.html</guid>
                <description> After my [first adventure with Kubernetes](/s/tutorials/My_First_Kubernetes_k3s_cluster_on_3_Orange_Pi_Zero_3s_including_k8s_dashboard_hello-node_and_failover.html), getting started with k3s on my small 3 node ARM cluster that [boots via PXE / NFS](/s/tutorials/Netboot_PXE_Armbian_on_an_Orange_Pi_Zero_3_from_SPI_with_NFS_root_filesystem.html), I noticed that there is only one k3s node that has the `control-plane,master` role. If that node fails you can no longer manager the cluster. Other nodes can fail and then the workloads (pods) will be restarted eventually after 5 minutes, but this node is special. Time to change that and make it a high available cluster.
K3s [supports](https://web.archive.org/web/20240703112841/https://docs.k3s.io/datastore/ha) high-availability with embedded `etcd` and with external databases like `MySQL` and `postgres`. `etcd` will thrash your storage (SD cards) so I decided to go with a `MySQL` cluster using `Galera` for the database and `keepalived` for the High Available Cluster IP. This guide will show you how to configure the HA database and HA-IP and I'll also setup [longhorn](https://web.archive.org/web/20240707025724/https://longhorn.io/) for high-available block storage inside kubernetes. The end result is that I can pull the power from any two of the three nodes without the k3s cluster or workloads going down. </description> 
                <pubDate>Tue, 09 Jul 2024 22:30:00 GMT</pubDate>
                <lastBuildDate>Tue, 09 Jul 2024 22:30:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>My First Kubernetes: k3s 'cluster' on 3 Orange Pi Zero 3's, including the dashboard, hello-node and failover</title> 
                <link>https://raymii.org/s/tutorials/My_First_Kubernetes_k3s_cluster_on_3_Orange_Pi_Zero_3s_including_k8s_dashboard_hello-node_and_failover.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/My_First_Kubernetes_k3s_cluster_on_3_Orange_Pi_Zero_3s_including_k8s_dashboard_hello-node_and_failover.html</guid>
                <description>I've been working as an embedded C++ developer for over 5 years now so my sysadmin / devops skills are becoming a bit rusty. The odd bit of Ansible here and there but no new stuff. I figured it was time to expore Kubernetes, as it is what all the cool kids do these days. So I [got myself 3 new SBC's] (/s/tutorials/Netboot_PXE_Armbian_on_an_Orange_Pi_Zero_3_from_SPI_with_NFS_root_filesystem.html), the [Orange Pi Zero 3] (https://web.archive.org/web/20240623200133/http://www.orangepi.org/html/hardWare/computerAndMicrocontrollers/details/Orange-Pi-Zero-3.html). I'll be using these to install and setup a basic Kubernetes cluster, getting the Dashboard working, installing a Hello World app and testing how the failover works. </description> 
                <pubDate>Fri, 28 Jun 2024 22:30:00 GMT</pubDate>
                <lastBuildDate>Fri, 28 Jun 2024 22:30:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Netboot (PXE) Armbian on an Orange Pi Zero 3 from SPI with NFS root filesystem</title> 
                <link>https://raymii.org/s/tutorials/Netboot_PXE_Armbian_on_an_Orange_Pi_Zero_3_from_SPI_with_NFS_root_filesystem.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Netboot_PXE_Armbian_on_an_Orange_Pi_Zero_3_from_SPI_with_NFS_root_filesystem.html</guid>
                <description>Because I wanted to experiment with Kubernetes I bought a few cheap SBC's and a Power over Ethernet switch to run `k3s`. Since Kubernetes is very resource intensive I wanted to try to boot the boards via the network without causing wear on the Micro SD card. The boards have built-in SPI flash from which it can boot `u-boot` and Armbian works quite well with a root filesystem over NFS. This guide will help you with netbooting an Orange Pi Zero 3 running Armbian.</description> 
                <pubDate>Tue, 25 Jun 2024 22:30:00 GMT</pubDate>
                <lastBuildDate>Tue, 25 Jun 2024 22:30:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Yocto boot2qt for the Seeed reTerminal (Qt 6)</title> 
                <link>https://raymii.org/s/tutorials/Yocto_boot2qt_for_the_Seeed_reTerminal_qt6.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Yocto_boot2qt_for_the_Seeed_reTerminal_qt6.html</guid>
                <description>In this guide we'll build a linux distribution for Seeed reTerminal, using the Yocto project and the `boot2qt` stack provided by Qt. This `boot2qt` image can be written to the internal eMMC and when booted up, the Seeed reTerminal runs a software stack that integrates nicely with Qt Creator (the Qt IDE), for example, one click deployment to the device. You can run your own Qt application on the reTerminal, full screen, it will boot right into it.
This guide covers Qt 6.2. The guide also covers changing the default startup app to your own app, Qt Creator integration and rotating your Qt app, both Widgets and QML, the latter via Wayland and Weston.</description> 
                <pubDate>Fri, 18 Mar 2022 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 04 Apr 2022 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Build a WeatherTerminal app for the Seeed reTerminal (with Qt 6 &amp; QML)</title> 
                <link>https://raymii.org/s/tutorials/Qt_QML_WeatherTerminal_app_for_the_Seeed_reTerminal.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Qt_QML_WeatherTerminal_app_for_the_Seeed_reTerminal.html</guid>
                <description>In this guide I'll show you how to build a weather app for the Seeed reTerminal using Qt and QML. Imagine the reTerminal in your entrance hallway and with just a quick glance at the screen you'll know what the weather will be the next few hours, if you need an umbrella, if you'll have a headwind on your bicycle ride or if it's just going to be clear and sunny. This tutorial builds on the [reTerminal Yocto boot2qt distro](/s/tutorials/Yocto_boot2qt_for_the_Seeed_reTerminal_qt6.html) we've built in the previous article and uses Qt 6. Qt is a C++ framework, but this Weather app will use QML almost exclusively. I'm using just QML to make the guide more accessible and also because I'm used to doing everything in C++, so a sidestep to QML is fun for me as well. </description> 
                <pubDate>Sat, 02 Apr 2022 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 02 Apr 2022 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Raspberry Pi Compute Module 4 eMMC flashing issue (nRPI_BOOT)</title> 
                <link>https://raymii.org/s/blog/Raspberry_Pi_Compute_Module_4_eMMC_flashing_issues.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Raspberry_Pi_Compute_Module_4_eMMC_flashing_issues.html</guid>
                <description>I recently got my hands on a Raspberry Pi 4 Compute Module, 4 GB with 32 GB eMMC flash and a Compute Module 4 IO board. Due to the global chip shortage it's hard to find one in stock but I got lucky by checking [rpilocator.com] (https://rpilocator.com/) regularly (thanks to [Jeff Geerling] (https://www.jeffgeerling.com/blog/2022/its-dire-raspberry-pi-availability-tracker-launched) for that site. He's got amazing Raspberry Pi related content next to a bunch of high-quality Ansible playbooks, go give him a visit).
The eMMC edition I have can only be flashed if you put a jumper on a pin on the I/O board (to put the cm4 in a special mode, `nRPI_BOOT`) and use a special tool, [usbboot](https://github.com/raspberrypi/usbboot). [Jeff has a great guide](https://web.archive.org/web/20220226203155/https://www.jeffgeerling.com/blog/2020/how-flash-raspberry-pi-os-compute-module-4-emmc-usbboot) on flashing the cm4 eMMC edition. My `cm4` however, was not showing up whenever I put it in this special flashing mode. This article goes over the troubleshooting I did and the eventual solution (hint: hardware problem).</description> 
                <pubDate>Sat, 26 Feb 2022 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 26 Feb 2022 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Yocto boot2qt for the Raspberry Pi 4, both Qt 5.15 and 6.2</title> 
                <link>https://raymii.org/s/tutorials/Yocto_boot2qt_for_the_Raspberry_Pi_4_both_Qt_6_and_Qt_5.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Yocto_boot2qt_for_the_Raspberry_Pi_4_both_Qt_6_and_Qt_5.html</guid>
                <description>In this guide we'll build a linux distribution for Raspberry Pi 4, using the Yocto project and the `boot2qt` stack provided by Qt. This `boot2qt` image can be written to an SD card and when booted up, the Raspberry Pi runs a software stack that integrates nicely with Qt Creator (the Qt IDE), for example, one click deployment to the device. You can run your own Qt application on the Pi, full screen, it will boot right into it.
This guide covers both Qt 5.15 and Qt 6.2. The 5.15 build process is a bit convoluted due to a few upstream issues. The guide also covers changing the default startup app to your own app and Qt Creator integration.</description> 
                <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 21 Feb 2022 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Using IceWM and a Raspberry Pi as my main PC, sharing my theme, config and some tips and tricks.</title> 
                <link>https://raymii.org/s/blog/Using_IceWM_and_sharing_my_config_and_tips_tricks.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Using_IceWM_and_sharing_my_config_and_tips_tricks.html</guid>
                <description>KDE is my desktop environment of choice. KDE5 is rock-solid, configurable in any way possible and works great. It treats you like a responsible adult instead of a child like GNOME does these days, and after XFCE switched to GTK3, the RAM usage is on-par, more often than not a bare KDE install (Debian or Arch) uses around 300MB ram. This is with Baloo (search indexer) and Akonadi (PIM database backend) disabled. Great default behaviour, low resource usage and enourmous configurability, so why is this post then titled 'IceWM'? At home I'm using a small ARM device (Raspberry Pi 4 with an SSD) as my main computer, and there resources are limited. KDE runs fine, but you notice that it is a bit slower than on my work computer. IceWM on the other hand, uses less than 30 MB of RAM and even less CPU. The program that gives you a desktop background, icewmbg, uses double the RAM of IceWM itself! IceWM, next to Awesome, is one of my favorite window managers, very configurable and provides all I need. This PC doesn't have multiple screens, which would be a bit more of a hassle than with KDE. After switching, the machine feels a lot faster. It's the small details in which I notice it, like text input, a few seconds of lag here and there. This post shows my IceWM config including some options explained, my IceWM theme and a few tips and tricks to configure the rest of the desktop.</description> 
                <pubDate>Sat, 10 Jul 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 10 Jul 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Broken Corrupted Raspberry Pi SD Card</title> 
                <link>https://raymii.org/s/blog/Broken_Corrupted_Raspberry_Pi_SD_Card.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Broken_Corrupted_Raspberry_Pi_SD_Card.html</guid>
                <description>One of my Raspberry Pi's would not boot up after a reboot. The SD card was corrupted, sadly beyond repair. This article walks you through the steps I took to try to fix the SD card, including fsck, badblocks and other filesystem utilities. It also has tips to reduce the writing on the Raspberry Pi, this to save SD cards from some amount of wear and thus possible corruption.</description> 
                <pubDate>Fri, 09 Jan 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 13 Nov 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Raspberry Pi unattended upgrade Raspbian to Debian Testing</title> 
                <link>https://raymii.org/s/blog/Raspberry_Pi_Raspbian_Unattended_Upgrade_Jessie_to_Testing.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Raspberry_Pi_Raspbian_Unattended_Upgrade_Jessie_to_Testing.html</guid>
                <description>I'm working on a Nitrokey/SmartCard-HSM cluster article and therefore I needed three identical computers. The current version of Raspbian (2016-05-27) is based on Debian Jessie and comes with a version of OpenSC that is too old (0.14) to work with the Nitrokey/SmartCard-HSM. Since there is no Ubuntu 16.04 official image yet I decided to upgrade Raspbian to Debian Testing. Since I don't want to answer yes to any config file changes or service restarts I figured out how to do an unattended dist-upgrade.</description> 
                <pubDate>Wed, 27 Jul 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 27 Jul 2016 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Make OpenELEC/Kodi work with the Sitecom CN-524/ Cambridge Silicon Radio (CSR) 8510 A10 Bluetooth USB adapter on the Raspberry Pi.</title> 
                <link>https://raymii.org/s/tutorials/Make_Openelec_Kodi_work_with_the_Sitecom_CN-524_Cambridge_Silicon_Radio_CSR_8510_A10_Bluetooth_USB_adapter_on_the_Raspberry_Pi.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Make_Openelec_Kodi_work_with_the_Sitecom_CN-524_Cambridge_Silicon_Radio_CSR_8510_A10_Bluetooth_USB_adapter_on_the_Raspberry_Pi.html</guid>
                <description>Recently I set up a Kodi (XMBC) media center on a Raspberry Pi.  The setup is mounted on a flatscreen TV and uses a small Wifi dongle for network access and a small Bluetooth dongle for a Rapoo E6700 wireless bluetooth keyboard/touchpad. This is a nice bluetooth keyboard/mouse combo for a media center, it charges via micro USB. That saves a lot of battery hassle. The bluetooth adapter is a Sitecom CN-524, which was the only one my local electronic store had available. It however does not work with linux/Kodi by default. This is because the device boots in a wrong mode. This guide shows you how this can be fixed and the necessary software changes for OpenELEC.</description> 
                <pubDate>Thu, 01 Oct 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 01 Oct 2015 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Raspberry Pi Arcade Machine</title> 
                <link>https://raymii.org/s/articles/Raspberry_Pi_Arcade_Machine.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Raspberry_Pi_Arcade_Machine.html</guid>
                <description>This article shows you how to build your own full size arcade machine using a Raspberry Pi. It involves a real, full size arcade cabinet, a converter device called a J-Pac and the MAME emulator software.</description> 
                <pubDate>Sun, 03 May 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 03 May 2015 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Olimex OlinuXino A20 LIME2 mainline 4.0.0 kernel, u-boot and debian rootfs image building tutorial</title> 
                <link>https://raymii.org/s/articles/Olimex_OlinuXino_A20_Lime2_Kernel_3.19_uBoot_Debian_7_image_building.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Olimex_OlinuXino_A20_Lime2_Kernel_3.19_uBoot_Debian_7_image_building.html</guid>
                <description>The Olimex OlinuXino A20 LIME2 is an amazing, powerfull and cheap open source ARM development board. It costs EUR 45, and has 160 GPIO pins. This is a guide to build a linux image with Debian and the mainline 4.0.0 kernel for the Olimex A20-Lime2 board, from scratch. By default it comes with an 3.4 kernel with binary blobs and patches from Allwinner. Recently the mainline kernel has gained support for these boards, you can now run and use the mainline kernel without these awfull non-free binary blobs.</description> 
                <pubDate>Sat, 21 Mar 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 21 Mar 2015 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Raspberry Pi FM radio transmitter with Buttons</title> 
                <link>https://raymii.org/s/articles/Raspberry_Pi_FM_Radio_With_Buttons.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Raspberry_Pi_FM_Radio_With_Buttons.html</guid>
                <description>The PiFM project allows you to use a Raspberry Pi to send out a WAV file on the FM band. This is awesome because every normal radio then can receive your music/podcast without expensive (sonos) equipment. I've used a lasercutter to craft a new top plate for my Pi which has room for three buttons. These are hooked up to a python script which allows me to start and stop the transmission, and skip or go back songs. It also allows me to shut down the Pi instead of just pulling the power cable.</description> 
                <pubDate>Wed, 04 Feb 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 04 Feb 2015 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Olimex OlinuXino A20 LIME2 Minimal Debian 7 Image</title> 
                <link>https://raymii.org/s/articles/Olimex_A20-OLinuXino-LIME2_minimal_debian_7_image.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Olimex_A20-OLinuXino-LIME2_minimal_debian_7_image.html</guid>
                <description>The Olimex OlinuXino A20 LIME2 is an amazing, powerfull and cheap open source ARM development board. It costs EUR 45, and has 160 GPIO pins. The default Debian image from OlimeX is quite huge and bloated, over 2,5 GB, with X and all. I do not want a huge image, so I stripped it down to a 200 MB image with only dhcp and ssh and a few basic tools. It uses about 15 MB of RAM. This image allows you to start with almost nothing and build up only what you need.</description> 
                <pubDate>Wed, 28 Jan 2015 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 28 Jan 2015 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Olimex OlinuXino a10 Lime uBoot, Kernel and root image guide</title> 
                <link>https://raymii.org/s/articles/Olimex_OlinuXino_10_Lime_uBoot_Kernel.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Olimex_OlinuXino_10_Lime_uBoot_Kernel.html</guid>
                <description>The Olimex OlinuXino A10 LIME is an amazing, powerfull and cheap open source ARM development board. It costs EUR 30, and has 160 GPIO. This guide is a cleaned up version of theirs with instructions to build your own kernel and u-boot image on Ubuntu 14.04.</description> 
                <pubDate>Sat, 20 Dec 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 20 Dec 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>IPSEC L2TP VPN on Arch Linux on a Raspberry Pi with OpenSwan, xl2tpd and ppp</title> 
                <link>https://raymii.org/s/tutorials/IPSEC_L2TP_vpn_on_a_Raspberry_Pi_with_Arch_Linux.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/IPSEC_L2TP_vpn_on_a_Raspberry_Pi_with_Arch_Linux.html</guid>
                <description>This is a guide on setting up an IPSEC/L2TP vpn server with Arch Linux on a Raspberry Pi using Openswan as the IPsec server, xl2tpd as the l2tp provider and ppp or local users / PAM for authentication. It has a detailed explanation with every step.</description> 
                <pubDate>Mon, 01 Dec 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 01 Dec 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Olimex OlinuXino a10 Lime Minimal Debian 7 Image</title> 
                <link>https://raymii.org/s/articles/Olimex_A10-OLinuXino-LIME_minimal_debian_7_image.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Olimex_A10-OLinuXino-LIME_minimal_debian_7_image.html</guid>
                <description>The Olimex OlinuXino A10 LIME is an amazing, powerfull and cheap open source ARM development board. It costs EUR 30, and has 160 GPIO. The default Debian image from OlimeX is quite huge and bloated, over 2 GB, with X and all. I do not want a huge image, so I stripped it down to a 200 MB image with only dhcp and ssh and a few basic tools. It uses about 20 MB of RAM. This image allows you to start with almost nothing and build up only what you need.</description> 
                <pubDate>Fri, 31 Oct 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 31 Oct 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Build a $35 Time Capsule - Raspberry Pi Time Machine Backup Server</title> 
                <link>https://raymii.org/s/articles/Build_a_35_dollar_Time_Capsule_-_Raspberry_Pi_Time_Machine.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Build_a_35_dollar_Time_Capsule_-_Raspberry_Pi_Time_Machine.html</guid>
                <description>This is a simple guide on building a $35 Time Capsule with a Raspberry Pi. A Time Capsule is a network attached storage device from Apple for use with their Time Machine. Time Machine gives users a very easy and userfriendly way to automatically create and restore (encrypted) backups. A Time Capsule is basically an expensive NAS that only talks the AFP/netatalk protocol. The 2 TB version costs $299 at this time, a Raspberry Pi only $35. </description> 
                <pubDate>Fri, 29 Aug 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 29 Aug 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Transmission Web on a Raspberry Pi with Arch Linux</title> 
                <link>https://raymii.org/s/blog/Transmission-Raspberry-Pi-Arch-Linux.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Transmission-Raspberry-Pi-Arch-Linux.html</guid>
                <description>One of my Raspberry Pi's was running a test setup of the Citadel groupware service. The test was sucessfull, so I set up a real world setup. The Raspberry Pi would serve another purpose, namely, a Linux Torrent seedbox. As in, to seed Linux torrents from linuxtracker.org. I choose Transmission for this, because it is simple, fast and stable. Transmission has a good webinterface, plus it allows access from remote clients with the transmission-remote gui packages. This article shows you how to set it up on a Raspberry Pi running Arch Linux.</description> 
                <pubDate>Mon, 28 Apr 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 28 Apr 2014 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Set up your own truly secure, encrypted and shared file synchronization, aka Dropbox clone</title> 
                <link>https://raymii.org/s/articles/Set_up_your_own_truly_secure_encrypted_shared_storage_aka_Dropbox_clone.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Set_up_your_own_truly_secure_encrypted_shared_storage_aka_Dropbox_clone.html</guid>
                <description>This article describes my truly secure, encrypted file synchronization service. It used EncFS and dvcs-autosync which lets me share only the encrypted data and mount that locally to get the plaintext. It works on OS X, Linux and ARM linux. This article has setup instructions for all those platforms.</description> 
                <pubDate>Tue, 15 Oct 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 15 Oct 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Small low cost linux pc's, an overview from 11-2012</title> 
                <link>https://raymii.org/s/articles/Small_Linux_PCs.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Small_Linux_PCs.html</guid>
                <description>This is an overview of small linux computers, mostly ARM based.</description> 
                <pubDate>Wed, 07 Nov 2012 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 07 Nov 2012 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    