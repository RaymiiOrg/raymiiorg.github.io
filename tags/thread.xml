<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag thread on Raymii.org</title> 
            <link>https://raymii.org/s/tags/thread.xml</link> 
            <description>RSS feed for tag thread on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/thread.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>My go-to C++ code for asynchronous work processing on a separate thread</title> 
                <link>https://raymii.org/s/software/My_go-to_Cpp_code_for_asynchronous_work_processing_on_a_separate_thread.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/My_go-to_Cpp_code_for_asynchronous_work_processing_on_a_separate_thread.html</guid>
                <description>You probably recognise this situation. You're working on your code and realise that the thing you're writing might take long, be blocking or is batch-wise. It might be resizing images, calling some API or processing hardware inputs or a stream of incoming messages. These tasks, if not handled efficiently, can halt your application, leaving it unresponsive. To avoid this, one solution is to offload these time-consuming operations to a separate thread, allowing the main application to continue executing without interruptions.
In this article, I'll show you how you can implement asynchronous work processing in C++ using a worker thread. This example class is my go-to for this situation and is easily adapted to handle more complex use cases. It has a queue of work items and uses a `std::thread`, a `std::mutex` combined with a `std::condition_variable` to manage work asynchronously, processing items one by one.</description> 
                <pubDate>Tue, 17 Dec 2024 23:59:00 GMT</pubDate>
                <lastBuildDate>Tue, 17 Dec 2024 23:59:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    