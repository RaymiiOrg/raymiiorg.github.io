<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag templates on Raymii.org</title> 
            <link>https://raymii.org/s/tags/templates.xml</link> 
            <description>RSS feed for tag templates on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/templates.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>C++ template definitions in a .cpp file (instead of a header file)</title> 
                <link>https://raymii.org/s/snippets/Cpp_template_definitions_in_a_cpp_file_instead_of_header.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Cpp_template_definitions_in_a_cpp_file_instead_of_header.html</guid>
                <description>In this snippet I'll show you how to place your C++ template definitions in a seperate .cpp file. I'd recommend you to just put template definitions in your header file, or a .hpp file, but if you really want to there is a trick to get them in a seperate .cpp file. The trick is to explicitly instanciate every template you're going to use at the end of the .cpp file. With many different templates and types this becomes cumbersome, but for certain usecases it could be useful. </description> 
                <pubDate>Sat, 22 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 22 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ create and write to a CSV file with a variadic template</title> 
                <link>https://raymii.org/s/snippets/Cpp_create_and_write_to_a_CSV_file_with_a_variadic_template.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Cpp_create_and_write_to_a_CSV_file_with_a_variadic_template.html</guid>
                <description>In this snippet I'll show you a variadic template to write to a file. In line with my other experiments to get a better grasp at templates, this example improves on my earlier attempt by using a variadic template, thus allowing you to provide an infinite number of columns to the csv file of any type that has the overloaded &lt;&lt; operator.</description> 
                <pubDate>Mon, 17 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 17 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Cooking with C++ templates and stronger types</title> 
                <link>https://raymii.org/s/blog/Cooking_with_Cpp_templates_and_stronger_types.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Cooking_with_Cpp_templates_and_stronger_types.html</guid>
                <description>To gain a better understanding of C++ templates I'm playing around with them. Most of the online guides stop at the example of a simple template to, for example, get the max of two inputs, or cover just a bit more (like how to overload operators for your specific template classes to make &lt;&lt; and + / - work). Combining templates with a stronger type to pass stuff around led me to a test kitchen. As in, some code with ingredients, amounts and an oven. One small thing kept it from working, after some feedback it turned out I was passing the wrong parameters to the template. Afterwards the error also made sense. This post covers both my learning and a small piece on stronger types.</description> 
                <pubDate>Thu, 13 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 13 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ variadic template recursive example</title> 
                <link>https://raymii.org/s/snippets/Cpp_variadic_template_recursive_example.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Cpp_variadic_template_recursive_example.html</guid>
                <description>In this article I'll show you how to use a variadic template in C++. Variadic templates allow you to have a template with a variable number of arguments, also called a parameter pack. Unpacking that pack is more difficult than it should be, so we use a recursive template to iterate over all the parameters one by one. I've also included an example in Python to compare to.</description> 
                <pubDate>Sat, 08 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 08 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    