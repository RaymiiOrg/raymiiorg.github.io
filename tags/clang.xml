<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag clang on Raymii.org</title> 
            <link>https://raymii.org/s/tags/clang.xml</link> 
            <description>RSS feed for tag clang on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/clang.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Logging all C++ destructors, poor mans run-time tracing</title> 
                <link>https://raymii.org/s/software/Logging_all_Cpp_destructors_poor_mans_run-time_tracing.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/Logging_all_Cpp_destructors_poor_mans_run-time_tracing.html</guid>
                <description>I recently faced a challenging issue with an application that wasn't shutting down correctly, either segfaulting or terminating without an active exception. Running the program via `valgrind` to check for memory leaks wasn't possible because the program couldnâ€™t perform its cleanup if it didn't shut down correctly. This article covers adding runtime instrumentation provided by `gcc` to log destructors. This helped me figure out what was still left over from the closed-source framework in use preventing correct shutdowns or causing segfaults. It includes example code, setup instructions and insights into handling shutdown issues in large, multi-threaded codebases.</description> 
                <pubDate>Sat, 21 Sep 2024 23:59:00 GMT</pubDate>
                <lastBuildDate>Sat, 21 Sep 2024 23:59:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>It compiles does not always mean that it works, a tale of virtual overridden fun in C++</title> 
                <link>https://raymii.org/s/articles/It_compiles_does_not_always_means_that_it_works.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/It_compiles_does_not_always_means_that_it_works.html</guid>
                <description>In a [recent article on clang-tidy](/s/snippets/Run_one_specific_clang-tidy_check_on_your_codebase.html) I referenced the fact that we're doing a huge refactoring regarding `char` pointers, lifetime, ownership and `std::strings`. Todays post is another one related to that change, where even though everything compiled correctly, it didn't `work`. For a compiled language, that is not something you expect. Next to unit tests, a compiler error is your number one sign that you've made a mistake somewhere.
In this case however, the code all compiled fine. The issue here was an older part of the code not using `override` combined with automated refactoring in CLion missing some parts of the code during a change. So, the issue in this case is entirely our own fault, it was spotted in the manual testing, but I'd rather had it not happen at all.
In this post I'll describe the problem including some example code that illustrates what happened. My key point is that even though the code compiles, you should always test it, preferably automated with unit and integrations tests, otherwise manually with a runbook.</description> 
                <pubDate>Wed, 12 May 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 14 May 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Run one specific clang-tidy check on your entire codebase</title> 
                <link>https://raymii.org/s/snippets/Run_one_specific_clang-tidy_check_on_your_codebase.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Run_one_specific_clang-tidy_check_on_your_codebase.html</guid>
                <description>Recently I did a major refactor on a piece of code that involved thousands of lines of code which were in one  way or another related to string handling. All of the code handled `char*` (C style character pointer arrays) and the concept of `const` or ownership was literally unknown in that part of the codebase. The refactored code uses `std::string`'s, but due to the legacy nature, a large number of methods returned `nullptr`'s instead of empty strings. I understand why this was done, but finding all those instances and the fact it only gives a runtime error was a bit of a bummer.
Luckily `clang-tidy` is here to save the day. In my IDE, CLion, it gives a warning when you return a `nullptr`. It however does that only in the file you're currently editing, and since we're talking millions of files, I wasn't going to open them by hand. You can run `clang-tidy` easily on one file, and it's not hard to run it on an entire codebase as well, using  the script `run-clang-tidy.py`, provided in their packages.
This snippet shows you how to run one specific `clang-tidy` check, in my case, `bugprone-string-constructor`, on a (cmake and C++) codebase.</description> 
                <pubDate>Mon, 05 Apr 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 05 Apr 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    