<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <?xml-stylesheet href="/s/inc/rss.xsl" type="text/xsl"?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag apt on Raymii.org</title> 
            <link>https://raymii.org/s/tags/apt.xml</link> 
            <description>RSS feed for tag apt on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/apt.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>Fast MQTT logger (to syslog)</title> 
                <link>https://raymii.org/s/software/Fast_MQTT_Logger.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/Fast_MQTT_Logger.html</guid>
                <description>For almost 5 years I've been using the `mqtt-data-logger` [python script](https://github.com/RaymiiOrg/mqtt-data-logger) to log all MQTT communication. This script works, but is a bit limited in how it stores logs (files per time it's started) and it often can't keep up with the message rate (tens of thousands per second) of my mqtt brokers.
So I've written a new tool in C++ to log all MQTT messages to syslog and optionally to the terminal. Then, via syslog, you can send it to where ever you like, be it a file or an ELK (Logstash/Elasticsearch/Kibana) stack. It even compiles without syslog support, if you only want to log to a file or the terminal.
There's a docker image and a docker compose file, so you can easily deploy it wherever you have an MQTT broker running. </description> 
                <pubDate>Tue, 25 Mar 2025 21:33:00 GMT</pubDate>
                <lastBuildDate>Tue, 25 Mar 2025 21:33:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>After 47 years, OpenVMS gets a package manager (VSP)!</title> 
                <link>https://raymii.org/s/blog/After_47_years_OpenVMS_gets_a_package_manager_VSP.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/After_47_years_OpenVMS_gets_a_package_manager_VSP.html</guid>
                <description>As of the 18th of February, OpenVMS, known for its stability and high-availability, 47 years old and ported to 4 different CPU architecture, has a package manager!
This article shows you how to use the package manager and talks about a few of its quirks. It's an early beta version, and you do notice that when using it.
A small list of things I noticed, coming from a Linux (apt/yum/dnf) background:
There seems to be no automatic dependency resolution and the dependencies it does list are incomplete. No update management yet, no removal of packages and no support for your own package repository, only the VSI official one. Service startup or login script changes are not done automatically. Packages with multiple installer files fail and require manual intervention.
It does correctly identify the architectures, has search support and makes it way easier to install software.
The time saved by downloading, manually copying and starting installation is huge, so even this early beta is a very welcome addition to OpenVMS.</description> 
                <pubDate>Mon, 17 Mar 2025 20:33:00 GMT</pubDate>
                <lastBuildDate>Mon, 17 Mar 2025 20:33:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>APT keeps complaining that the HTTPS certificate cannot be validated?</title> 
                <link>https://raymii.org/s/blog/Syncthing_apt_repo_keeps_complaining_HTTPS_certificate_could_not_be_validated.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/blog/Syncthing_apt_repo_keeps_complaining_HTTPS_certificate_could_not_be_validated.html</guid>
                <description>Recently a few of my Ubuntu 20.04 and Debian 11 servers failed to run an `apt update` because it insisted that the HTTPS certificate for a repository could not be validated, while `curl` on the same system had no issues connecting. Join me on a deep dive into certificate validation and troubleshooting `apt`, digging into the C++ source code for `apt` and `GnuTLS` and in the end, it turned out to be my own fault due to permission on a folder. However, the error messages were totally unhelpful resolving the mysterious validation problem. This article was written over the period of a few days, chronologically during troubleshooting.</description> 
                <pubDate>Wed, 11 Jan 2023 05:31:00 GMT</pubDate>
                <lastBuildDate>Wed, 11 Jan 2023 05:31:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Installing PyGopherd on Ubuntu 20.04</title> 
                <link>https://raymii.org/s/tutorials/Installing_PyGopherd_on_Ubuntu_20.04.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Installing_PyGopherd_on_Ubuntu_20.04.html</guid>
                <description>Ubuntu 20.04 dropped the Pygopherd package. There is no way to install it from the official repositories. In this guide I'll show you two ways to install the version from Ubuntu 18.04, which still works perfectly on 20.04. Either via just downloading the 2 deb packages, or via `apt pinning` from the previous (18.04) repository.</description> 
                <pubDate>Sat, 04 Jul 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 04 Jul 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Github Actions, C++ with Boost and cmake, almost a 50% speedup with caching</title> 
                <link>https://raymii.org/s/articles/Github_Actions_cpp_boost_cmake_speedup.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/articles/Github_Actions_cpp_boost_cmake_speedup.html</guid>
                <description>For a personal project I use Github for source code hosting and Github Actions as an automated build and test tool. Github Actions compiles my cmake project and runs all the unit tests on every commit. It also saves a build artifact, the actual compiled program. By utilizing some dependency caching and make flags I sped up the build process by 43% by caching the apt install libboost1.65-dev and giving cmake a -j2 makeflag. This article shows my simple setup to compile a C++ project with cmake and Boost on Github Actions. After compilation, it runs all the tests and uploads the compiled binary for download. For my one man project it's overkill, but when collaborating or when builds take a long time on your own machine, it's great to have an automated build / test system.</description> 
                <pubDate>Wed, 27 May 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 27 May 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Ansible - Only do action if on specific distribution (Debian, Ubuntu, CentOS or RHEL) or distribution version (ubuntu precise, ubuntu trusty)</title> 
                <link>https://raymii.org/s/tutorials/Ansible_-_Only_if_on_specific_distribution_or_distribution_version.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Ansible_-_Only_if_on_specific_distribution_or_distribution_version.html</guid>
                <description>This ansible playbook example helps you execute actions only if you are on a certain distribution. You might have a mixed environment with CentOS and Debian, when using ansible to execute actions on different servers you don't need to run yum on debian, or apt on CentOS. Some package names are different and such, so this helps you with a when statement to select a specific distribution. As a bonus, you also get a when for specific distribution versions, like Ubuntu precise (12.04 LTS) or Ubuntu trusty (14.04 LTS).</description> 
                <pubDate>Sun, 09 Nov 2014 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 16 Dec 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Ansible - Only do something if another action changed</title> 
                <link>https://raymii.org/s/tutorials/Ansible_-_Only-do-something-if-another-action-changed.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Ansible_-_Only-do-something-if-another-action-changed.html</guid>
                <description>This Ansible tutorial shows you how execute actions only if another action has changed. For example, a playbook which downloads a remote key for package signing but only executes the apt-add command if the key has changed. Or a playbook which clones a git repository and only restarts a service if the git repository has changed.</description> 
                <pubDate>Sun, 22 Dec 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 15 Dec 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Ansible - Add an apt-repository on Debian and Ubuntu</title> 
                <link>https://raymii.org/s/tutorials/Ansible_-_Add_an_apt-repository_on_Debian_and_Ubuntu.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Ansible_-_Add_an_apt-repository_on_Debian_and_Ubuntu.html</guid>
                <description>This is a guide that shows you how to add an apt repository to Debian and Ubuntu using Ansible. It includes both the old way, when the apt modules only worked on Ubuntu, and the new way, now that the apt-modules also support Debian, plus some other tricks.</description> 
                <pubDate>Sun, 15 May 2016 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 14 Dec 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Ansible - add apt_key inline</title> 
                <link>https://raymii.org/s/snippets/Ansible_-_add_apt_key_inline.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/snippets/Ansible_-_add_apt_key_inline.html</guid>
                <description>Using the apt_key module one can add an APT key with ansible. You can get the key from a remote server or from a file, or just a key ID. I got the request to do some stuff on a machine which was quite rescricted (so no HKP protocol) and I was asked not to place to many files on the machine. The apt_key was needed but it could not be a file, so using a YAML Literal Block Scalar I was able to add the key inline in the playbook. Not the best way to do it, but one of the many ways Ansible allows it.</description> 
                <pubDate>Thu, 19 Apr 2018 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 19 Apr 2018 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Ansible - Sudo sometimes</title> 
                <link>https://raymii.org/s/tutorials/Ansible_-_Better_sudo_control.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Ansible_-_Better_sudo_control.html</guid>
                <description>This Ansible tutorial shows you how run some actions via sudo and some not. It also shows you how to run an entire role via sudo or not.</description> 
                <pubDate>Sat, 21 Dec 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 21 Dec 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Silent unatended apt-get upgrade</title> 
                <link>https://raymii.org/s/tutorials/Silent-automatic-apt-get-upgrade.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Silent-automatic-apt-get-upgrade.html</guid>
                <description>This tutorial will show you how to setup completely silent apt-get upgrade via cron. It also defaults to not overwriting config files if a package has a newer version.</description> 
                <pubDate>Sat, 30 Mar 2013 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 30 Mar 2013 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Ubuntu/Debian update mailer</title> 
                <link>https://raymii.org/s/software/Ubuntu_update_mailer.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/software/Ubuntu_update_mailer.html</guid>
                <description>This is a bash script for Ubuntu and Debian, to be run by cron on a set interval. It checks if there are apt-updates, and if so, mails an overview of the packages which can be updated, whith their local version, the version available and an URL to the Ubuntu package site where you can see the changelog. I wrote this as an addition for my Nagios monitoring, that only shows how many updates there are, this is a lot more verbose. It also runs on Debian since 1 Nov 2012. Only the links don't work then, because the packages are different.</description> 
                <pubDate>Sun, 10 Jun 2012 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 10 Jun 2012 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Set up a local Ubuntu (apt) repository with apt-mirror</title> 
                <link>https://raymii.org/s/tutorials/Set_up_a_local_Ubuntu_debian_apt_mirror.html?utm_medium=rss&amp;utm_source=raymii&amp;utm_campaign=tagrss</link> 
                <guid>https://raymii.org/s/tutorials/Set_up_a_local_Ubuntu_debian_apt_mirror.html</guid>
                <description>This tutorial shows you how to setup your own debian/ubuntu package repository with apt-mirror.</description> 
                <pubDate>Wed, 28 Mar 2012 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 28 Mar 2012 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    