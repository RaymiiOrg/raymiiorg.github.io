I’ve made good strides toward my goal of assembling a test PDP-8 assembler program. Before I can assemble a program though, first I have to get it onto the PDP-8’s disk. Now I could just paste the program after making edits on my PC, but that is kind of cheating. I really should be able to edit the program on the PDP-8.

There are two editors on the PDP-8: EDIT and TECO. TECO is what I used when I worked on the DEC-10 at TSU, and I hated it enough to still recall how much I hated it. For fun we would type our names into the command prompt and try to guess what might happen to our text file.

Unfortunately EDIT is really not much better. If you ever used edlin in DOS, EDIT is about as ugly.

EDIT is documented in the PDP-8 OS/8 Reference Manual, Section 4. I believe I already mentioned where to find this manual. The PDF file name is AA-H607A-TA_OS8_V3D_sysMan.pdf.

The idea behind EDIT (and TECO for that matter), is you read a page of text from disk into the edit buffer (pages are separated by form feed characters which I will call FF). The edit buffer is about 3000 bytes, so you work on the program page by page.

To create a new file simply type:

CREATE <filename>
to edit an existing file, type:

EDIT <filename>
you will be presented with the ‘#’ prompt. If this is an existing file, you must read the first page into the buffer by typing

#R
To insert text at the top of the buffer, use I. To append to the end, use A. You can start inserting before any line by typing <n>I where <n> is the line number (which is never displayed) such as

#1I
TYPED TEXT 1
TYPED TEXT 2
TYPED TEXT 3
TYPED TEXT 4
TYPED TEXT 5
<control-L> to terminate input
#
The [m[,n]]L command will list the buffer. L by itself displays the entire buffer. 5L displays line 5 and 1,5L displays lines 1 through 5:

#1,5L
TYPED TEXT 1
TYPED TEXT 2
TYPED TEXT 3
TYPED TEXT 4
TYPED TEXT 5
. indicates the current line.  If you type .L the current line is displayed:

#.L
TYPED TEXT 3
. can be used with offsets such as .+1 or .-1.

You can use < and > to move up and down lines of the buffer:

#<TYPED TEXT 2

#<TYPED TEXT 1

#>TYPED TEXT 2

#>TYPED TEXT 3
This lets you easily get the current line set if you don’t have too many lines in the buffer.

To delete a line, use nD where <n> is . or a line number.

#.D

#L
TYPED TEXT 1
TYPED TEXT 2
TYPED TEXT 4
TYPED TEXT 5
To change a line, nC is brute force. It deletes the line indicated by <n>, then waits for you to type in a replacement:

#1C
FIXED TEXT 1
<control-L> typed here
#L
FIXED TEXT 1
TYPED TEXT 2
TYPED TEXT 4
TYPED TEXT 5
As I mentioned, EDIT reads a page from disk into the buffer. When you are done with that page and ready to move to the next type N. This writes the existing page to the output file (P command), clears the buffer (K command), and reads the next page from the input file (R command). You can use the P, K, and R commands individually, but be careful. Doing these commands out of sequence can mess up your file.

When you are done editing, use the E command to exit. This will write the current buffer to the output file, then copy all remaining pages from the input to the output file if you aren’t already on the last page.

As I said, the C command is brute force for fixing a line. There is also the S command (single character search). It has more finesse but is screwy to use even for people like me used to using command line editing.

To invoke the S command, simply type nS where <n> is a line number or .

Then type a single character to find. Assume I have the line

ABC DEF GHI

and . points to that line. I want to start editing at E so I type:

.S
E
When I type the E I actually see:

#.S
ABC DE
The S command is now waiting for me to edit the line. I’m going to just list all of the possibilities here:

ctl-G ctl-G stops the editing and returns to the # prompt
Typing characters starts inserting them after the displayed text
pressing backspace (ctl-H) deletes characters that you see from right to left
pressing return deletes everything AFTER what you see
pressing ctl-J ctl-L splits the line
pressing ctl-L finds the next matching character
pressing ctl-G then another character starts searching for the new character
Like I said, screwy.

Last thing to cover is searching. There are two types of searching – intrabuffer (inside the buffer) and interbuffer (across the entire file).

The format of the intrabuffer search is

$<string>'|"L
where $ is actually the escape key. ‘ indicates to start searching at the top of the buffer where ” indicates to search at the next line. To find the line with TEXT in it, I type:

#$TEXT'L
FIXED TEXT 1
To find the next occurrence, simply type:

#"L
TYPED TEXT 2
The interbuffer search is about the same. To invoke it, type the J command first, use the $<string>’ form:

#J
$TEXT'
#.L
FIXED TEXT 1
That covers most of the commands for the PDP-8’s EDIT. Using EDIT I was able to enter the source to my first assembler program:

.TYPE ASM1.PA
/ TEST PROGRAM THAT ADDS 3 AND 4 AND LEAVES THE SUM IN THE ACCUMULATOR
*200
    CLA
    TAD A
    TAD B
    HLT
    JMP I [7600 / RETURN TO MONITOR
A,  0003
B,  0004

.
The next blog installment will be to actually assemble this little test program.

Getting the Program onto Disk

The last blog entry was about using the PDP-8’s EDIT program. Go take a look if you need more of an explanation.

We will copy this program into the clipboard:

/ Test program that adds 3 and 4 and leaves the sum in the accumulator
*200               /Start assembling program at Memory location %200 (octal 200)
    CLA            /Clear the accumulator
    TAD A          /Add contents of memory location A to accumulator
    TAD B          /Add contents of memory location B to accumulator
    HLT            /Halt the CPU
    JMP I [7600    /Return to OS/8
A,  0003           /Define A as %3
B,  0004           /Define B as %4
Now fire up the editor and have it append text into the buffer:

.CREATE PROG1.PA

#A
Now paste the program into EDIT.  At the end of the paste operation, type control-L to return to command mode and then type E to save and exit. Then I do a DIR command to verify the file is there:

A,  0003           /DEFINE A AS %3
B,  0004           /DEFINE B AS %4

#E

.DIR PROG1.PA

PROG1 .PA   2

   1 FILES IN    2 BLOCKS - 2386 FREE BLOCKS
You should also “TYPE PROG1.PA” just to verify it is like you expect it to be.

Now that the program source is on disk, we are ready to assemble it. The simple format of the PAL command is

PAL srcfile

To compile PROG1.PA, simply type:

PAL PROG1

If any errors are found, an error count is displayed and you need to re-assemble the program using this format of the PAL command:

PAL PROG1,PROG1<PROG1/H

This assembles  the program AND produces a listing. You can look at this listing to determine the problem. Let’s have a look at the listing generated:

.TYPE PROG1.LS

             / TEST PROGRAM THAT ADDS 3 AND 4 AND LEAVES THE SUM IN THE ACCUMULATOR
       0200  *200               /START ASSEMBLING PROGRAM AT MEMORY LOCATION %200 (OCTAL 200)
00200  7200      CLA            /CLEAR THE ACCUMULATOR
00201  1205      TAD A          /ADD CONTENTS OF MEMORY LOCATION A TO ACCUMULATOR
00202  1206      TAD B          /ADD CONTENTS OF MEMORY LOCATION B TO ACCUMULATOR
00203  7402      HLT            /HALT THE CPU
00204  5577      JMP I [7600    /RETURN TO OS/8
00205  0003  A,  0003           /DEFINE A AS %3
00206  0004  B,  0004           /DEFINE B AS %4


             $
00177  7600


A      0205
B      0206


ERRORS DETECTED: 0
LINKS GENERATED: 0
In the listing, there are 2 columns before the source code. The first column is the location of the instruction. We told the assembler to start at %200 and, indeed, the first instruction (CLA) starts at %200.

The second column is the instruction opcode that is placed into memory. The Opcode for clearing the accumulator is %7200.

I believe the $ is the indication that is the end of the source. The next line has something to do with the indirect jump to %7600. I think I kind of understand what is happening, but not well enough to explain it :-)

Below that are the addresses for the labels. For example, A is at location %205.

Finally the number of errors is listed. If you get errors, take a look in the PAL manual for an explanation of the codes.

Now that we have successfully assembled the test program, we are ready to load the binary image into memory. For our test program, the binary image is in the file PROG1.BN. Unless you specify otherwise with the PAL8 program, the extension is always BN.

To load the program into memory we will use the absolute loader which is called ABSLDR. ABSLDR is invoked using the LOAD command:

.LOAD PROG1
.
And now the program is loaded into memory, starting at location %200. To start the program you use the START command:

.START
Usually you will just want to LOAD and START at the same time, so just type this:

.LOAD PROG1/G
As soon as you do this, you will be bounced back to the SIMH prompt!!!!

.LOAD PROG1/G

HALT instruction, PC: 00204 (JMP I 177)
sim>
This happened because of the HLT (Halt) instruction in the simple program. That instruction literally tells the CPU to stop EVERYTHING (not something you really get to do in any modern operating system).

I am stopping the CPU because I want to be able to examine contents of memory and the accumulator since there is no other way for this simple program to communicate as to what 3+4 is.

Now that we are in simh, let’s dump the contents of memory locations 200-206 which is the location of the simple test program:

sim> e 200-206
200:    7200
201:    1205
202:    1206
203:    7402
204:    5577
205:    0003
206:    0004
Compare the memory contents with the 2nd column in the program listing and you will see the memory matches what the assembler created.

Where is the answer? Well it is in the accumulator which we can see by typing:

sim> e ac
AC:     0007
And there is the answer: %3 + %4 is %7. Since the values are < 8 octal looks like decimal and you can verify the answer is correct.

To get simh running OS/8 again, simply type

sim> go

.
The next instruction in the simple program is executed which is the indirect jump to restart OS/8.

A simple PAL8 program for the PDP-8 entered, assembled, loaded, and executed!


C’s ++ Operator and the PDP-8

Ever wonder how the language C came to use ++ to increment a variable? The old DEC computers had an option to auto increment registers which made memory access easier – you would access, say, location 200 via a register and it would autoincrement to 201 for the next access.

It has been my understanding that when C was written (and it was first written for a DEC computer), rather than try to figure out and optimize something like

c=s[i];
i=i+1;
to use the hardware’s autoincrement ability, they came up with the ++ operator which was a hint to the compiler what was going on and it could more easily make use of autoincrement when a programmer wrote:

c=s[i++];
The hello world program, below, uses an autoincrement register.

BTW, I should mention I DETEST the use of ++ and NEVER use it in my own C programs. I know, I am the only one.

What is the Point to Octal?

The other thing of interest, well at least to me, is the use of octal for the PDP-8. Very shortly after I started programming professionally on a 16 bit minicomputer, I found it very clumsy to use octal yet that was the normal method, at that time, for describing binary numbers.

So the characters “AB” would fit into 16 bits as 0100000101000010. We would write this in octal as %040502. But you could not look at that octal value and see the octal values for A (%101) and B(%102). I could usually see the right half of %040502 was a B but I would have to do math to figure out the left half.

Years later, hexadecimal became more widespread and that made sense. “AB” in hex is 0x4142. You can quickly look hex 41 up (if you don’t already have it memorized) and see it is an A.

I always wondered why we were forced to use octal in the early days of my career. Then one day it hit me like a bolt of lightening. The old systems’ memory sizes were based on multiples of 6 bits, not 8. the PDP-8 was a 12 bit architecture. The DEC-10 was 36 bits. Octal makes perfect sense in those systems (hence the old SIXBIT character encodings of the DEC-10).

So on the PDP-8, AB (in SIXBIT, not ASCII) is binary 000001 000002 or %0102 which is easy to look at and determine the actual characters.

Hello World Program

OK enough digression. Let’s get on to the program. Here it is:

/PDP-8 PAL ASSEMBLY LANGUAGE PROGRAM TO PRINT HELLO WORLD!

        *200                    /LOCATE PROGRAM STARTING AT ADDR 200
        AIX1=10                 /SETUP AUTOINDEX REGISTER 1

        CLA                     /CLEAR ACCUMULATOR
        CLL                     /CLEAR AC LINK
        TAD CHRSTR              /LOAD 1ST WRD OF CHRSTR (WHICH IS
                                /THE ADDR OF CHRSTR)
        DCA AIX1                /STORE THAT IN AUTOINDEX REG 1

LOOP,   NOP                     /TOP OF LOOP TO READ AND PRINT STRING
                                /I USE A NOP JUST TO MAKE IT EASIER TO
                                /INSERT CODE BELOW THE LABEL.
        TAD I AIX1              /INCR ADDR IN AIX1, THEN LOAD AC FROM THAT
        SNA                     /IF AC IS NOT ZERO, SKIP NEXT INSTRUCTION
        JMP I [7600             /EXIT PROGRAM (BACK TO MONITOR)
        JMS TTYO                /CALL OUTPUT ROUTINE
        JMP LOOP                /REPEAT LOOP

TTYO,   0                       /TTY OUTPUT ROUTINE. THE FIRST WORD OF
                                /A SUBROUTINE MUST BE EMPTY (0) BECAUSE
                                /THE JMS INSTRUCTION INSERTS THE RETURN
                                /ADDR IN THIS WORD.
        TLS                     /WRITE AC TO THE OUTPUT DEVICE (TTY)
        TSF                     /IF TTY IS READY, SKIP NEXT INSTRUCTION.
        JMP .-1                 /TTY IS NOT READY, SO CHECK AGAIN
        CLA                     /CLEAR AC
        JMP I TTYO              /RETURN TO CALLER

CHRSTR, .                       /1ST WORD IS ADDR OF STRING
        110                     /H
        105                     /E
        114                     /L
        114                     /L
        117                     /O
        040                     /
        127                     /W
        117                     /O
        122                     /R
        114                     /L
        104                     /D
        041                     /!
        000                     /<EOT>
This is a pretty straight forward program and I commented every line to help explain what is hapening. The first section initializes everything. AIX1 is the first autoincrement register and will contain the address of the string to print.

The loop simply loads each character from memory into the accumulator and calls the TTYO subroutine to print it.

TAD I AIX1 increments the address in AIX1, then uses that address to load the next character to print from memory.

Calling a subroutine is a bit interesting as there is no return stack. Instead, the first word of the subroutine is left unused. When it is called, the JMS instruction writes the return address into that word. To return, you jump back to that address. NO RECURSION IS POSSIBLE!! Well, not unless you implement your own stack.

Note that to make life simpler, I encoded the HELLO WORLD! string in memory using ASCII NOT SIXBIT.

Normally, to encode a character string into memory you would use the instruction

      TEXT /HELLO WORLD!/
which could create the string in memory in SIXBIT. For this simple program, it was easier to hand encode the table in ASCII.

As each character is read, it is tested to see if it is zero. If it is, then the program exits.

The TTYO procedure is interesting in as much as you cannot write a character until the terminal is ready. So this subroutine writes a character, then waits until it has been processed before returning control to the caller.

img prog2-pdp8.png



Since I figured out how to assemble PDP-8 PAL assembly language, I figured I should try to compile a FORTRAN program.

The PDP-8 has two FORTRAN compilers: FORTRAN II and FORTRAN IV. FORTRAN II is particularly primitive. In my second job, I some times had to translate FORTRAN II code to COBOL and detested FORTRAN II – mainly because the IF test was so cryptic.

The FORTRAN II if statement is in the form

IF (expression) label1, label2, label3
The is evaluated. If < 0, it branches to label1. If = 0, it branches to label2. If > 0, it branches to label3. Ugh.

FORTRAN IV has a proper IF statement so that is the FORTRAN I want to use.

And, of course, insisting on using FORTRAN IV created a headache. The initial disk image I have been using (which doesn’t have a working BASIC) also doesn’t have a working FORTRAN IV compiler.

If you attempt to compile a program in FORTRAN IV, I get the error ‘SY’ which indicates one of the additional programs (PASS2, PASS2O, or RALF) are missing or there isn’t enough memory. I know I have the programs, and SIMH provides the maximum possible memory (32K), so the problem would appear to be the compiler.

After doing a lot of searching I found an image that has a working FORTRAN IV compiler (I found the same SY error on several of the other OS/8 images). The working image can be found at

http://www.pdp8online.com/pdp8cgi/os8_html?act=dir;fn=images/os8/disk2.fortran.rk05;sort=name

To copy the necessary files, I did the following:

PDP-8 simulator V3.9-0
Type 'boot rk0' to begin and 'control-e' to return to SIMH prompt
sim> attach rk0 rk0.dsk                 #this is my primary drive
sim> attach rk1 f2.rk0                  #this is the image downloaded above
sim> boot rk0

.ASSIGN RKA0: C
.ASSIGN RKA1: A
.COPY C:
Now let’s create a ‘Hello World!’ program in FORTRAN:

.CREATE HELLO.FT

#A
        WRITE(4,10)
10      FORMAT(' HELLO WORLD!');
        END

#L
        WRITE(4,10)
10      FORMAT(' HELLO WORLD!');
        END

#E
To compile this, you must manually run the compiler and loader. I tried various combinations of using the COMPILE and LOAD commands and never got them to work.

To compile and load:

.R F4
*HELLO
and, finally to run the program:

.EXE HELLO.LD

HELLO WORLD!

.




In my blog entry

Assembling/Compiling to SIMH PDP-8 Paper Tape and Executing the Paper Tape Program

I loaded the Hello World test program into memory automatically using SIMH’s load command rather than emulating all of the futzing around one would really do on a PDP-8 to really load a program from paper tape.

In this, my final installation of using the PDP-8 emulator, I will show you how to do the entire process manually, pretty near to what one would have had to do on a real PDP-8.

We will be using the Hello World program, prog3.bin, that was written in the prior blog entry.

I figured this procedure out by reading the book “Introduction to Programming” which can be googled as IntroToProgramming1969.pdf.

When you turn a PDP-8 on, the memory is randomly set and there is no ROM memory to get things bootstrapped like there would be on any even near-modern computer. Instead, you had to enter your boot strap program by hand into memory using the PDP-8 switch register.



To enter the instruction 6014 at address 7756, first you would set the switch register to 111 111 101 110 and then transfer that into the program counter. Then you would set the switch register to  110 000 001 100 and deposit that into memory. That would get one instruction encoded. The boot strap program is  small, but this is still a painfully slow process (and there is no room for mistakes).

This painfully slow process is what we are going to emulate.

The ‘boot strap’ program for the PDP-8 is called the RIM loader. This tiny program can load programs in RIM format from the paper tape reader.

Generally the only thing the RIM loader is used for is to load the larger BIN loader which can read files in BIN format from the paper tape reader. The BIN loader is a much longer program and so you really don’t want to load that using the switch register.

Once the BIN loader is in memory, you would use that to load your own application from paper tape. The RIM and BIN loaders are in high memory, and normally not overwritten. Once you load them you don’t have to do so again until the computer is shut off or your application over writes them.

 Step 1: Load the RIM Loader

In SIMH, we don’t have a switch register to enter instructions into memory. Instead we use the deposit command. We will start ‘depositing’ the RIM loader at memory location 7756. This is done with the slightly easier to use deposit (d) command:

d 7756 6014
d 7757 6011
d 7760 5357
d 7761 6016
d 7762 7106
d 7763 7006
d 7764 7510
d 7765 5357
d 7766 7006
d 7767 6011
d 7770 5367
d 7771 6016
d 7772 7420
d 7773 3776
d 7774 3376
d 7775 5357
d 7776 0
d 7777 0
Just copy and paste those commands into SIMH. You can then see the instructions you deposited using the examine (e) command:

sim> e -m 7756-7777
7756:   RFC
7757:   RSF
7760:   JMP 7757
7761:   RFC RRB
7762:   CLL RTL
7763:   RTL
7764:   SPA
7765:   JMP 7757
7766:   RTL
7767:   RSF
7770:   JMP 7767
7771:   RFC RRB
7772:   SNL
7773:   DCA I 7776
7774:   DCA 7776
7775:   JMP 7757
7776:   AND 0
7777:   AND 0
Step 2: Load the Binary Loader

You can get the binary loader from this location. Download it, place in your PDP-8 directory and rename to something simpler like loader.bin.

Now attach the binary loader file to the paper tape reader:

sim> attach ptr loader.bin
Load the binary loader using the RIM loader:

sim> go 7756
<<press control-E>> to halt the CPU
Simulation stopped, PC: 07760 (JMP 7757)
sim>
The binary loader is now in memory.

Step 3: Load your application using the binary loader:

Set the switch register to 3777 and attach your application’s bin file to the paper tape reader. I am using the Hello World application written in a prior blog entry which is in the file prog3.bin

sim> deposit sr 3777
sim> attach ptr prog3.bin
sim>
To load from the tape reader, start execution of the binary loader at memory location 7777:

sim> go 7777

HALT instruction, PC: 07701 (KCC)
sim>
The Hello World Application is now loaded into memory, starting at location 200 (because that is where we told the assembler to place it).

To run the application program, we start execution with memory location 200:

sim> run 200
HELLO WORLD!
HALT instruction, PC: 00210 (JMS 212)
sim>
Pretty cool, huh! Of course it would have been a lot cooler if I had a real PDP-8, could toggle in the RIM loader and a real paper tape reader to read paper tape with, but I’ll make do with what I have.